#!/bin/bash

# –í–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º
set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
REPO_URL="https://github.com/gopnikgame/telegram-shop-bot.git"
PROJECT_DIR="telegram-shop-bot"
INSTALL_DIR="/opt/$PROJECT_DIR" # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
LOG_FILE="/var/log/telegram-shop-bot.log"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local level=$1
    local message=$2
    echo -e "${!level}${message}${NC}" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è wrapper-—Å–∫—Ä–∏–ø—Ç–æ–≤
create_symlinks() {
    log "BLUE" "üîó –°–æ–∑–¥–∞–Ω–∏–µ wrapper-—Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞..."
    
    local manage_script="$INSTALL_DIR/manage_bot.sh"
    local bin_dir="/usr/local/bin"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    if [ ! -f "$manage_script" ]; then
        log "RED" "‚ùå –§–∞–π–ª $manage_script –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º wrapper-—Å–∫—Ä–∏–ø—Ç—ã
    local commands=("shopbot" "manager")
    for cmd in "${commands[@]}"; do
        local wrapper_path="$bin_dir/$cmd"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if [ -f "$wrapper_path" ]; then
            log "YELLOW" "‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ $cmd..."
            rm -f "$wrapper_path"
        fi
        
        # –°–æ–∑–¥–∞–µ–º wrapper-—Å–∫—Ä–∏–ø—Ç
        cat > "$wrapper_path" << EOF
#!/bin/bash
# Wrapper script for telegram-shop-bot manager
cd "$INSTALL_DIR" && exec bash manage_bot.sh "\$@"
EOF
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        chmod +x "$wrapper_path"
        
        if [ -x "$wrapper_path" ]; then
            log "GREEN" "‚úÖ –°–æ–∑–¥–∞–Ω wrapper-—Å–∫—Ä–∏–ø—Ç: $cmd"
        else
            log "RED" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å wrapper-—Å–∫—Ä–∏–ø—Ç $cmd"
        fi
    done
    
    log "GREEN" "‚úÖ Wrapper-—Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –ª—é–±–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
    echo "  - shopbot"
    echo "  - manager"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
log "BLUE" "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
if ! command -v git &> /dev/null || ! command -v docker &> /dev/null || ! command -v nano &> /dev/null; then
    log "YELLOW" "‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤
    if command -v apt-get &> /dev/null; then
        apt-get update
        apt-get install -y git docker.io nano
    elif command -v yum &> /dev/null; then
        yum install -y git docker nano
    elif command -v dnf &> /dev/null; then
        dnf install -y git docker nano
    else
        log "RED" "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose –∏–ª–∏ docker compose
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null 2>&1; then
    log "YELLOW" "‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    if command -v apt-get &> /dev/null; then
        apt-get install -y docker-compose-plugin
    else
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ pip –∫–∞–∫ fallback
        curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
if [ -d "$INSTALL_DIR" ]; then
    log "BLUE" "üöÄ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $INSTALL_DIR"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    cd "$INSTALL_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
    if [ -d ".git" ]; then
        log "BLUE" "üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        BACKUP_DIR="/opt/$PROJECT_DIR/backups/backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$BACKUP_DIR"
        
        log "BLUE" "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        
        # –ë—ç–∫–∞–ø .env
        if [ -f ".env" ]; then
            cp ".env" "$BACKUP_DIR/"
            log "GREEN" "  ‚úÖ .env —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
        fi
        
        # –ë—ç–∫–∞–ø texts.yml
        if [ -f "app/texts.yml" ]; then
            cp "app/texts.yml" "$BACKUP_DIR/"
            log "GREEN" "  ‚úÖ texts.yml —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
        fi
        
        # –ë—ç–∫–∞–ø –ø–∞–ø–∫–∏ static (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        if [ -d "static" ]; then
            cp -r "static" "$BACKUP_DIR/"
            log "GREEN" "  ‚úÖ static/ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ($(du -sh static 2>/dev/null | cut -f1))"
        fi
        
        # –ë—ç–∫–∞–ø –ø–∞–ø–∫–∏ uploads (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
        if [ -d "uploads" ] && [ "$(ls -A uploads 2>/dev/null)" ]; then
            cp -r "uploads" "$BACKUP_DIR/"
            log "GREEN" "  ‚úÖ uploads/ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ($(du -sh uploads 2>/dev/null | cut -f1))"
        fi
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        git fetch origin
        
        CURRENT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
        REMOTE=$(git rev-parse origin/main 2>/dev/null || echo "unknown")
        
        if [ "$CURRENT" != "$REMOTE" ] && [ "$CURRENT" != "unknown" ]; then
            log "YELLOW" "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            log "BLUE" "üìã –ù–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
            git log HEAD..origin/main --oneline --graph --decorate 2>/dev/null || true
            
            echo ""
            read -r -p "–û–±–Ω–æ–≤–∏—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏? [Y/n] " response
            response=${response:-Y}
            
            if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
                log "BLUE" "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                REPO_URL=$(git config --get remote.origin.url)
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ backups –∏ uploads
                log "BLUE" "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º backups –∏ uploads)..."
                find . -maxdepth 1 ! -name '.' ! -name '..' ! -name 'backups' ! -name 'uploads' -exec rm -rf {} + 2>/dev/null || true
                
                # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–Ω–æ–≤–æ
                log "BLUE" "üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ–∂–µ–π –≤–µ—Ä—Å–∏–∏..."
                git clone "$REPO_URL" temp_clone
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
                log "BLUE" "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤..."
                mv temp_clone/.git .
                mv temp_clone/* . 2>/dev/null || true
                mv temp_clone/.* . 2>/dev/null || true
                rm -rf temp_clone
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                log "BLUE" "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ .env
                if [ -f "$BACKUP_DIR/.env" ]; then
                    cp "$BACKUP_DIR/.env" ".env"
                    log "GREEN" "  ‚úÖ .env –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                fi
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ texts.yml
                if [ -f "$BACKUP_DIR/texts.yml" ]; then
                    cp "$BACKUP_DIR/texts.yml" "app/texts.yml"
                    log "GREEN" "  ‚úÖ texts.yml –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                fi
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ static (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                if [ -d "$BACKUP_DIR/static" ]; then
                    mkdir -p "static"
                    cp -r "$BACKUP_DIR/static/"* "static/" 2>/dev/null || true
                    log "GREEN" "  ‚úÖ static/ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"
                fi
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ uploads
                if [ -d "$BACKUP_DIR/uploads" ] && [ "$(ls -A "$BACKUP_DIR/uploads" 2>/dev/null)" ]; then
                    cp -rn "$BACKUP_DIR/uploads/"* "uploads/" 2>/dev/null || true
                    log "GREEN" "  ‚úÖ uploads/ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)"
                fi
                
                log "GREEN" "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            fi
        else
            log "GREEN" "‚úÖ –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è"
        fi
    else
        log "YELLOW" "‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º, –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞..."
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        BACKUP_DIR="/opt/$PROJECT_DIR/backups/backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$BACKUP_DIR"
        
        log "BLUE" "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."
        [ -f ".env" ] && cp ".env" "$BACKUP_DIR/"
        [ -f "app/texts.yml" ] && cp "app/texts.yml" "$BACKUP_DIR/"
        [ -d "static" ] && cp -r "static" "$BACKUP_DIR/"
        [ -d "uploads" ] && [ "$(ls -A uploads 2>/dev/null)" ] && cp -r "uploads" "$BACKUP_DIR/"
        
        # –£–¥–∞–ª—è–µ–º –∏ –∫–ª–æ–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        cd /opt
        rm -rf "$INSTALL_DIR"
        git clone "$REPO_URL" "$INSTALL_DIR"
        cd "$INSTALL_DIR"
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        log "BLUE" "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        [ -f "$BACKUP_DIR/.env" ] && cp "$BACKUP_DIR/.env" ".env"
        [ -f "$BACKUP_DIR/texts.yml" ] && cp "$BACKUP_DIR/texts.yml" "app/texts.yml"
        [ -d "$BACKUP_DIR/static" ] && mkdir -p "static" && cp -r "$BACKUP_DIR/static/"* "static/" 2>/dev/null || true
        [ -d "$BACKUP_DIR/uploads" ] && cp -rn "$BACKUP_DIR/uploads/"* "uploads/" 2>/dev/null || true
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    chmod +x manage_bot.sh
    
    # –°–æ–∑–¥–∞–µ–º wrapper-—Å–∫—Ä–∏–ø—Ç—ã
    create_symlinks
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    log "BLUE" "üöÄ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞..."
    ./manage_bot.sh
else
    log "BLUE" "‚¨áÔ∏è –ü–µ—Ä–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    mkdir -p "$INSTALL_DIR"
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    git clone "$REPO_URL" "$INSTALL_DIR"
    cd "$INSTALL_DIR"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    chmod +x manage_bot.sh
    
    # –°–æ–∑–¥–∞–µ–º wrapper-—Å–∫—Ä–∏–ø—Ç—ã
    create_symlinks
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    log "BLUE" "üöÄ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞..."
    ./manage_bot.sh
fi

log "GREEN" "‚úÖ –ì–æ—Ç–æ–≤–æ!"