from fastapi import APIRouter, Header, Request, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, delete
from sqlalchemy.exc import IntegrityError
from loguru import logger

from app.db.session import get_db_session
from app.models import Order, Item, Purchase, ItemType, OrderStatus, User, ItemCode, CartItem
from aiogram import Bot
from bot.webhook_app import bot as global_bot
from app.config import settings
from app.services.delivery import DeliveryService
from app.utils.texts import load_texts
from app.services.yookassa import verify_webhook_basic, is_trusted_yookassa_ip, YooKassaClient

router = APIRouter(prefix="/payments", tags=["payments"]) 


def get_bot() -> Bot:
    return global_bot


@router.get("/webhook/test")
async def test_webhook_endpoint() -> dict:
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook"""
    return {
        "status": "ok",
        "message": "YooKassa webhook endpoint is accessible",
        "endpoint": "/payments/yookassa/webhook",
        "method": "POST"
    }


@router.post("/yookassa/webhook")
async def yookassa_webhook(
    request: Request,
    authorization: str | None = Header(default=None),
    db: AsyncSession = Depends(get_db_session),
    bot: Bot = Depends(get_bot),
) -> dict:
    # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    logger.bind(event="yk.webhook.received").info("–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç YooKassa")
    
    # –ü–æ–ª—É—á–∞–µ–º payload
    try:
        payload = await request.json()
        logger.bind(event="yk.webhook.payload").info(
            "Payload: event={}, status={}", 
            payload.get("event"), 
            payload.get("object", {}).get("status")
        )
    except Exception as e:
        logger.bind(event="yk.webhook.error").error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ payload: {}", e)
        raise HTTPException(status_code=400, detail="Invalid JSON payload")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã credentials)
    if settings.yk_webhook_user and settings.yk_webhook_password:
        if not verify_webhook_basic(authorization):
            logger.bind(event="yk.webhook.auth_failed").warning("–ù–µ–≤–µ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è webhook")
            raise HTTPException(status_code=401, detail="unauthorized")
        logger.bind(event="yk.webhook.auth_ok").info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è webhook —É—Å–ø–µ—à–Ω–∞")
    else:
        logger.bind(event="yk.webhook.auth_skip").info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è webhook –æ—Ç–∫–ª—é—á–µ–Ω–∞ (YK_WEBHOOK_USER –Ω–µ –∑–∞–¥–∞–Ω)")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
    try:
        peer = request.client.host if request.client else None
        if peer and not is_trusted_yookassa_ip(peer):
            logger.bind(event="yk.webhook.untrusted_ip").warning(
                "Webhook –æ—Ç IP –≤–Ω–µ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö: {}", peer
            )
    except Exception as e:
        logger.bind(event="yk.webhook.ip_check_error").warning("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP: {}", e)

    obj = payload.get("object", {}) if isinstance(payload, dict) else {}
    event = payload.get("event") if isinstance(payload, dict) else None
    metadata = obj.get("metadata", {}) if isinstance(obj, dict) else {}
    status = obj.get("status")
    
    logger.bind(event="yk.webhook.event").info(
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è: type={}, status={}, metadata={}", 
        event, status, metadata
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏ —Å—Ç–∞—Ç—É—Å–∞
    if not (event == "payment.succeeded" and status == "succeeded"):
        logger.bind(event="yk.webhook.skip").info(
            "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ: event={}, status={}", event, status
        )
        return {"ok": True}
    
    logger.bind(event="yk.webhook.processing").info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã")

    # ========== –î–û–ù–ê–¢–´ ==========
    donation_raw = metadata.get("donation")
    donation_flag = False
    if isinstance(donation_raw, bool):
        donation_flag = donation_raw
    elif isinstance(donation_raw, str):
        donation_flag = donation_raw.strip().lower() in {"true", "1", "yes"}
    if donation_flag:
        logger.bind(event="yk.webhook.donation").info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–Ω–∞—Ç–∞")
        if settings.admin_chat_id:
            try:
                amount_value = (obj.get("amount", {}) or {}).get("value")
                buyer_tg_id = metadata.get("buyer_tg_id")
                try:
                    buyer_tg_id_int = int(buyer_tg_id) if buyer_tg_id is not None and str(buyer_tg_id).isdigit() else None
                except Exception:
                    buyer_tg_id_int = None
                buyer_username = None
                if buyer_tg_id_int is not None:
                    buyer_username = (await db.execute(select(User.username).where(User.tg_id == buyer_tg_id_int))).scalar_one_or_none()
                texts = load_texts().get("notifications", {})
                template = texts.get("donation_received") or (
                    "üéÅ –î–æ–Ω–∞—Ç –ø–æ–ª—É—á–µ–Ω\n–°—É–º–º–∞: {amount} ‚ÇΩ\n–û—Ç: {buyer_username}"
                )
                text = template.format(
                    amount=amount_value or "0.00",
                    buyer_username=(f"@{buyer_username}" if buyer_username else "-"),
                )
                await bot.send_message(int(settings.admin_chat_id), text)
                logger.bind(event="yk.webhook.donation.sent").info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–Ω–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
            except Exception as e:
                logger.bind(event="yk.webhook.donation.error").error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–Ω–∞—Ç–µ: {}", e)
        return {"ok": True}

    # ========== –ê–î–ú–ò–ù-–°–ß–ï–¢–ê ==========
    admin_invoice_raw = metadata.get("admin_invoice")
    admin_invoice_flag = False
    if isinstance(admin_invoice_raw, bool):
        admin_invoice_flag = admin_invoice_raw
    elif isinstance(admin_invoice_raw, str):
        admin_invoice_flag = admin_invoice_raw.strip().lower() in {"true", "1", "yes"}
    if admin_invoice_flag:
        logger.bind(event="yk.webhook.admin_invoice").info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-—Å—á–µ—Ç–∞")
        if settings.admin_chat_id:
            try:
                amount_value = (obj.get("amount", {}) or {}).get("value")
                description = obj.get("description") or "‚Äî"
                text = (
                    "üßæ –ê–¥–º–∏–Ω-—Å—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω\n"
                    f"–°—É–º–º–∞: {amount_value or '0.00'} ‚ÇΩ\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                )
                await bot.send_message(int(settings.admin_chat_id), text)
                logger.bind(event="yk.webhook.admin_invoice.sent").info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–¥–º–∏–Ω-—Å—á–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.bind(event="yk.webhook.admin_invoice.error").error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–¥–º–∏–Ω-—Å—á–µ—Ç–µ: {}", e)
        return {"ok": True}

    # ========== –û–§–§–õ–ê–ô–ù –ó–ê–ö–ê–ó–´ (–ù–û–í–û–ï) ==========
    offline_order_id_raw = metadata.get("offline_order_id")
    if offline_order_id_raw:
        logger.bind(event="yk.webhook.offline_order").info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞ #{}", offline_order_id_raw)
        try:
            order = (await db.execute(
                select(Order).where(Order.id == int(offline_order_id_raw))
            )).scalar_one_or_none()
            
            if not order:
                logger.bind(event="yk.webhook.offline_order.not_found").error("–û—Ñ—Ñ–ª–∞–π–Ω –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", offline_order_id_raw)
                raise HTTPException(status_code=404, detail="offline order not found")
            
            if order.status == OrderStatus.PAID:
                logger.bind(event="yk.webhook.offline_order.already_paid").info("–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω")
                return {"ok": True}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            purchases = (await db.execute(
                select(Purchase).where(Purchase.order_id == order.id)
            )).scalars().all()
            
            if not purchases:
                logger.warning(f"No purchases found for offline order {order.id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            order.status = OrderStatus.PAID
            await db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if order.buyer_tg_id:
                try:
                    user_message = (
                        "‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!*\n\n"
                        f"üì¶ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω\n"
                        f"üí∞ –°—É–º–º–∞: `{order.amount_minor/100:.2f}` ‚ÇΩ\n\n"
                        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
                    )
                    await bot.send_message(
                        chat_id=int(order.buyer_tg_id),
                        text=user_message,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"Failed to send confirmation to user: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            if settings.admin_chat_id and purchases:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                    item_ids = [p.item_id for p in purchases if p.item_id]
                    items = (await db.execute(
                        select(Item).where(Item.id.in_(item_ids))
                    )).scalars().all()
                    
                    items_text = "\n".join([f"‚Ä¢ {item.title} - {item.price_minor/100:.2f} ‚ÇΩ" for item in items])
                    
                    # –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ (–æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ)
                    first_purchase = purchases[0]
                    
                    buyer_username = None
                    if order.buyer_tg_id:
                        buyer_username = (await db.execute(
                            select(User.username).where(User.tg_id == int(order.buyer_tg_id))
                        )).scalar_one_or_none()
                    
                    texts = load_texts().get("notifications", {})
                    template = texts.get("offline_order_paid") or (
                        "üí≥ –û–§–§–õ–ê–ô–ù –ó–ê–ö–ê–ó #{order_id} –û–ü–õ–ê–ß–ï–ù\n\n"
                        "–¢–æ–≤–∞—Ä—ã:\n{items_text}\n\n"
                        "–°—É–º–º–∞: {amount} ‚ÇΩ\n\n"
                        "üì¶ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                        "üë§ –§–ò–û: {fullname}\n"
                        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                        "üìç –ê–¥—Ä–µ—Å: {address}\n"
                        "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
                        "üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer} {buyer_username}"
                    )
                    
                    message = template.format(
                        order_id=order.id,
                        items_text=items_text,
                        amount=f"{order.amount_minor/100:.2f}",
                        fullname=first_purchase.delivery_fullname or "‚Äî",
                        phone=first_purchase.delivery_phone or "‚Äî",
                        address=first_purchase.delivery_address or "‚Äî",
                        comment=first_purchase.delivery_comment or "‚Äî",
                        buyer=order.buyer_tg_id or "-",
                        buyer_username=(f"@{buyer_username}" if buyer_username else ""),
                    )
                    
                    await bot.send_message(
                        chat_id=int(settings.admin_chat_id),
                        text=message,
                        parse_mode="Markdown"
                    )
                    logger.info(f"Sent offline order paid notification to admin for order #{order.id}")
                except Exception as e:
                    logger.error(f"Failed to send offline order notification: {e}")
            
            return {"ok": True}
        
        except HTTPException:
            raise
        except Exception as e:
            logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞: {}", e)
            await db.rollback()
            raise HTTPException(status_code=500, detail="Internal server error")

    # ========== –ö–û–†–ó–ò–ù–ê (—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã) ==========
    cart_order_id_raw = metadata.get("cart_order_id")
    if cart_order_id_raw:
        logger.bind(event="yk.webhook.cart").info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã, order_id={}", cart_order_id_raw)
        try:
            order = (await db.execute(
                select(Order).where(Order.id == int(cart_order_id_raw))
            )).scalar_one_or_none()
            
            if not order:
                logger.bind(event="yk.webhook.cart.not_found").error("–ó–∞–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", cart_order_id_raw)
                raise HTTPException(status_code=404, detail="cart order not found")
            
            if order.status == OrderStatus.PAID:
                logger.bind(event="yk.webhook.cart.already_paid").info("–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞")
                return {"ok": True}
            
            purchases = (await db.execute(
                select(Purchase).where(Purchase.order_id == order.id)
            )).scalars().all()
            
            logger.bind(event="yk.webhook.cart.items").info("–ù–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫: {}", len(purchases))
            
            # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –∫–æ–¥—ã –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
            codes_to_deliver = []
            for purchase in purchases:
                item = (await db.execute(
                    select(Item).where(Item.id == purchase.item_id)
                )).scalar_one_or_none()
                
                if not item:
                    continue
                
                allocated_code: str | None = None
                if item.item_type == ItemType.DIGITAL and item.delivery_type == 'codes':
                    code_row = (await db.execute(
                        select(ItemCode)
                        .where(ItemCode.item_id == item.id, ItemCode.is_sold == False)
                        .limit(1)
                        .with_for_update(skip_locked=True)
                    )).scalars().first()
                    
                    if not code_row:
                        logger.error(
                            "–ö–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ | order_id={} item_id={}",
                            order.id, item.id
                        )
                        raise HTTPException(
                            status_code=500, 
                            detail=f"Item {item.title} out of stock"
                        )
                    
                    code_row.is_sold = True
                    code_row.sold_order_id = order.id
                    allocated_code = code_row.code
                
                codes_to_deliver.append((item, allocated_code))
            
            order.status = OrderStatus.PAID
            await db.commit()
            
            delivery = DeliveryService(bot)
            for item, code in codes_to_deliver:
                try:
                    if code:
                        text = f"<b>{code}</b>"
                        await bot.send_message(
                            int(order.buyer_tg_id), 
                            text, 
                            reply_markup=None, 
                            parse_mode="HTML"
                        )
                    await delivery.deliver(int(order.buyer_tg_id), item)
                except Exception as e:
                    logger.error(
                        "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ | order_id={} item={} error={}",
                        order.id, item.title, e
                    )
            
            if settings.admin_chat_id:
                try:
                    texts = load_texts().get("notifications", {})
                    template = texts.get("cart_paid") or (
                        "üõí –û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—É—á–µ–Ω–∞\n"
                        "–¢–æ–≤–∞—Ä–æ–≤: {items_count}\n–°—É–º–º–∞: {amount} ‚ÇΩ\n"
                        "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer} {buyer_username}\n–ó–∞–∫–∞–∑: {order_id}"
                    )
                    buyer_username = None
                    if order.buyer_tg_id:
                        buyer_username = (await db.execute(
                            select(User.username).where(User.tg_id == int(order.buyer_tg_id))
                        )).scalar_one_or_none()
                    text = template.format(
                        items_count=len(purchases),
                        amount=f"{order.amount_minor/100:.2f}",
                        buyer=order.buyer_tg_id or "-",
                        buyer_username=(f"@{buyer_username}" if buyer_username else ""),
                        order_id=order.id,
                    )
                    await bot.send_message(int(settings.admin_chat_id), text)
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {}", e)
            
            logger.bind(event="yk.webhook.cart.success").info("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, order_id={}", order.id)
            return {"ok": True}
        
        except HTTPException:
            raise
        except Exception as e:
            logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {}", e)
            await db.rollback()
            raise HTTPException(status_code=500, detail="Internal server error")
    
    # ========== –û–ë–´–ß–ù–´–ï –ó–ê–ö–ê–ó–´ (–û–î–ò–ù –¢–û–í–ê–†) ==========
    payment_id = metadata.get("paymentId")
    if not payment_id:
        logger.bind(event="yk.webhook.no_payment_id").error("paymentId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ metadata: {}", metadata)
        raise HTTPException(status_code=400, detail="paymentId missing")

    logger.bind(event="yk.webhook.order").info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, payment_id={}", payment_id)

    try:
        order = (await db.execute(
            select(Order).where(Order.id == int(payment_id))
        )).scalar_one_or_none()
        
        if not order:
            logger.bind(event="yk.webhook.order.not_found").error("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", payment_id)
            raise HTTPException(status_code=404, detail="order not found")

        if order.status == OrderStatus.PAID:
            logger.bind(event="yk.webhook.order.already_paid").info("–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω")
            return {"ok": True}

        logger.bind(event="yk.webhook.order.processing").info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ PAID")
        order.status = OrderStatus.PAID

        item = (await db.execute(
            select(Item).where(Item.id == order.item_id)
        )).scalar_one_or_none()
        
        allocated_code: str | None = None
        if item:
            purchase = Purchase(
                order_id=order.id, 
                user_id=order.user_id, 
                item_id=item.id, 
                delivery_info=None
            )
            db.add(purchase)
            logger.bind(event="yk.webhook.order.purchase").info("–°–æ–∑–¥–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {}", item.title)

            # ‚úÖ –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è –∫–æ–¥–∞
            if item.item_type == ItemType.DIGITAL and item.delivery_type == 'codes':
                logger.bind(event="yk.webhook.order.code").info("–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {}", item.title)
                code_row = (await db.execute(
                    select(ItemCode)
                    .where(ItemCode.item_id == item.id, ItemCode.is_sold == False)
                    .limit(1)
                    .with_for_update(skip_locked=True)
                )).scalars().first()
                
                if not code_row:
                    logger.error(
                        "–ö–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ | order_id={} item_id={}",
                        order.id, item.id
                    )
                    raise HTTPException(
                        status_code=500, 
                        detail=f"Item {item.title} out of stock"
                    )
                
                code_row.is_sold = True
                code_row.sold_order_id = order.id
                allocated_code = code_row.code
                logger.bind(event="yk.webhook.order.code.reserved").info("‚úÖ –ö–æ–¥ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω")

        await db.commit()
        logger.bind(event="yk.webhook.order.committed").info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")

        # ‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if order.buyer_tg_id and item:
            logger.bind(event="yk.webhook.order.delivery").info("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", order.buyer_tg_id)
            delivery = DeliveryService(bot)
            try:
                if allocated_code:
                    text = f"<b>{allocated_code}</b>"
                    await bot.send_message(
                        int(order.buyer_tg_id), 
                        text, 
                        reply_markup=None, 
                        parse_mode="HTML"
                    )
                    logger.bind(event="yk.webhook.order.code.sent").info("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                
                await delivery.deliver(int(order.buyer_tg_id), item)
                logger.bind(event="yk.webhook.order.delivery.success").info("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(
                    "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ | order_id={} buyer={} error={}",
                    order.id, order.buyer_tg_id, e
                )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        if settings.admin_chat_id:
            logger.bind(event="yk.webhook.order.notify_admin").info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É")
            try:
                texts = load_texts().get("notifications", {})
                template = texts.get("order_paid") or (
                    "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞\n"
                    "–¢–æ–≤–∞—Ä: {item}\n–°—É–º–º–∞: {amount} ‚ÇΩ\n"
                    "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer} {buyer_username}\n–ó–∞–∫–∞–∑: {order_id}"
                )
                buyer_username = None
                if order.buyer_tg_id:
                    buyer_username = (await db.execute(
                        select(User.username).where(User.tg_id == int(order.buyer_tg_id))
                    )).scalar_one_or_none()
                text = template.format(
                    item=item.title if item else "–î–æ–Ω–∞—Ç",
                    amount=f"{order.amount_minor/100:.2f}",
                    buyer=order.buyer_tg_id or "-",
                    buyer_username=(f"@{buyer_username}" if buyer_username else ""),
                    order_id=order.id,
                )
                await bot.send_message(int(settings.admin_chat_id), text)
                logger.bind(event="yk.webhook.order.notify_admin.success").info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {}", e)

        logger.bind(event="yk.webhook.order.complete").info("‚úÖ –ó–∞–∫–∞–∑ #{} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", order.id)
        return {"ok": True}
    
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {}", e)
        await db.rollback()
        raise HTTPException(status_code=500, detail="Internal server error")
