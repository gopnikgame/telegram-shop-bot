import logging
logger = logging.getLogger("shopbot")
from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from pathlib import Path
import contextlib
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func, delete
from sqlalchemy.exc import IntegrityError

from app.utils.texts import load_texts
from .keyboards import (
    main_menu_kb, 
    back_kb, 
    item_card_kb, 
    payment_method_kb, 
    items_list_kb, 
    main_menu_only_kb, 
    payment_link_kb, 
    donate_amounts_kb, 
    admin_menu_kb,
    cart_kb,
    skip_kb  # <- –î–û–ë–ê–í–õ–ï–ù–û
)
from app.db.session import AsyncSessionLocal
from app.models import Item, ItemType, User, Purchase, CartItem, Order, PaymentMethod, OrderStatus, ItemCode
from app.config import settings
from app.services.orders_client import OrdersClient
from app.services.yookassa import YooKassaClient

router = Router()


class DonateStates(StatesGroup):
    waiting_for_amount = State()


class AdminInvoiceStates(StatesGroup):
    waiting_for_description = State()
    waiting_for_amount = State()


# ========== –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –û–§–§–õ–ê–ô–ù –î–û–°–¢–ê–í–ö–ò ==========
class OfflineDeliveryStates(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    waiting_for_comment = State()


def _is_admin_user(tg_id: int | None, username: str | None) -> bool:
    try:
        if settings.admin_chat_id and tg_id is not None:
            if str(tg_id) == str(settings.admin_chat_id):
                return True
    except Exception:
        pass
    if settings.admin_tg_username and username:
        return username.lstrip('@').lower() == settings.admin_tg_username.lstrip('@').lower()
    return False


async def send_offline_order_to_admin(order_id: int, items: list, delivery_data: dict, bot) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞–∫–∞–∑–µ"""
    if not settings.admin_chat_id:
        logger.warning("Admin chat ID not configured, skipping admin notification")
        return
    
    items_text = "\n".join([f"‚Ä¢ {item.title} - {item.price_minor/100:.2f} ‚ÇΩ" for item in items])
    total = sum(item.price_minor for item in items)
    
    message = (
        f"üõç *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*\n\n"
        f"*–¢–æ–≤–∞—Ä—ã:*\n{items_text}\n\n"
        f"*–ò—Ç–æ–≥–æ:* `{total/100:.2f}` ‚ÇΩ\n\n"
        f"üì¶ *–î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:*\n"
        f"üë§ –§–ò–û: {delivery_data.get('fullname', '‚Äî')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {delivery_data.get('phone', '‚Äî')}\n"
        f"üìç –ê–¥—Ä–µ—Å: {delivery_data.get('address', '‚Äî')}\n"
    )
    
    if delivery_data.get('comment'):
        message += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {delivery_data['comment']}\n"
    
    try:
        await bot.send_message(
            chat_id=int(settings.admin_chat_id),
            text=message,
            parse_mode="Markdown"
        )
        logger.info(f"Sent offline order notification to admin for order #{order_id}")
    except Exception as e:
        logger.error(f"Failed to send offline order notification: {e}")


async def has_offline_items(items: list) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ"""
    return any(item.item_type == ItemType.OFFLINE for item in items)


@router.message(F.text == "/start")
async def start_handler(message: Message) -> None:
    texts = load_texts()

    async with AsyncSessionLocal() as db:
        u = (await db.execute(select(User).where(User.tg_id == message.from_user.id))).scalar_one_or_none()
        if not u:
            u = User(tg_id=message.from_user.id, username=message.from_user.username or None)
            db.add(u)
            await db.flush()
            total = (await db.execute(select(func.count()).select_from(User))).scalar_one()
            if settings.admin_chat_id:
                try:
                    username = f"@{message.from_user.username}" if message.from_user.username else "‚Äî"
                    text = (
                        "‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "
                        f"{message.from_user.full_name}\n"
                        f"Username: {username}\n"
                        f"ID: {message.from_user.id}\n"
                        f"–í—Å–µ–≥–æ: {total}"
                    )
                    await message.bot.send_message(int(settings.admin_chat_id), text)
                except Exception:
                    pass
        else:
            if (message.from_user.username or None) != u.username:
                u.username = message.from_user.username or None
        await db.commit()
        
        cart_count = (await db.execute(
            select(func.count()).select_from(CartItem).where(CartItem.user_id == u.id)
        )).scalar_one()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        if "image" in texts["main_menu"]:
            photo = FSInputFile(texts["main_menu"]["image"])
            await message.answer_photo(
                photo=photo,
                caption=texts["main_menu"]["title"],
                parse_mode="Markdown",
                reply_markup=main_menu_kb(texts, is_admin=_is_admin_user(message.from_user.id, message.from_user.username), cart_count=cart_count)
            )
        else:
            await message.answer(texts["main_menu"]["title"], parse_mode="Markdown", reply_markup=main_menu_kb(texts, is_admin=_is_admin_user(message.from_user.id, message.from_user.username), cart_count=cart_count))
    except FileNotFoundError:
        await message.answer(texts["main_menu"]["title"], reply_markup=main_menu_kb(texts, is_admin=_is_admin_user(message.from_user.id, message.from_user.username), cart_count=cart_count))


@router.message(F.text.startswith("/"))
async def quick_menu_commands(message: Message) -> None:
    cmd = (message.text or "").strip().lstrip("/").lower()
    if cmd == "projects":
        await list_items(message, ItemType.DIGITAL, section="projects", page=1)
        return
    # –°–æ–ª–æ–±–æ—Ç –º–æ–¥—É–ª–∏ —É–¥–∞–ª–µ–Ω—ã
    if cmd == "services":
        await list_items(message, ItemType.SERVICE, section="services", page=1)
        return
    if cmd in ("buylist", "purchased", "my"):
        texts = load_texts()
        async with AsyncSessionLocal() as db:
            user = (await db.execute(select(User).where(User.tg_id == message.from_user.id))).scalar_one_or_none()
            if not user:
                await message.answer(texts.get("empty", {}).get("purchased", "–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."))

                return
            purchases = (await db.execute(select(Purchase).where(Purchase.user_id == user.id))).scalars().all()
            if not purchases:
                await message.answer(texts.get("empty", {}).get("purchased", "–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."))

                return
            item_ids = [p.item_id for p in purchases if p.item_id is not None]
            items = (await db.execute(select(Item).where(Item.id.in_(item_ids)))).scalars().all()
        kb = []
        for it in items:
            kb.append([InlineKeyboardButton(text=it.title, callback_data=f"item:{it.id}:{it.item_type.value}")])
        kb.append([InlineKeyboardButton(text=texts["buttons"]["back"], callback_data="back:main")])
        title = texts["main_menu"].get("purchased_title", "–í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
        image_path = texts["main_menu"].get("images", {}).get("purchased")
        if image_path and Path(image_path).is_file():
            photo = FSInputFile(image_path)
            await message.answer_photo(photo=photo, caption=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        else:
            await message.answer(text=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        return
    if cmd in ("donat", "donate"):
        texts = load_texts()
        donate_image = texts.get("donate", {}).get("image")
        image_exists = bool(donate_image and Path(donate_image).is_file())
        if image_exists:
            photo = FSInputFile(donate_image)
            await message.answer_photo(photo=photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:", reply_markup=donate_amounts_kb())
        else:
            await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:", reply_markup=donate_amounts_kb())
        return


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data.startswith("menu:"))
async def main_menu_callback(call: CallbackQuery) -> None:
    texts = load_texts()
    data = call.data.split(":", 1)[1]

    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å–µ–∫—Ü–∏–∏
    section_mapping = {
        "projects": (ItemType.DIGITAL, "projects"),
        "services": (ItemType.SERVICE, "services"),
    }

    if data in section_mapping:
        item_type, section = section_mapping[data]
        await list_items(call.message, item_type, section=section, call=call, page=1)
        await call.answer()
        return
    if data == "admin":
        # –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if not _is_admin_user(call.from_user.id, call.from_user.username):
            await call.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return
        admin_text = load_texts().get("admin", {}).get("title", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
        try:
            if call.message.photo:
                await call.message.edit_caption(caption=admin_text, reply_markup=admin_menu_kb())
            else:
                await call.message.edit_text(text=admin_text, reply_markup=admin_menu_kb())
        except Exception:
            await call.message.answer(admin_text, reply_markup=admin_menu_kb())
            with contextlib.suppress(Exception):
                await call.message.delete()
        await call.answer()
        return


    if data == "donate":
        donate_image = load_texts().get("donate", {}).get("image")
        image_exists = bool(donate_image and Path(donate_image).is_file())
        try:
            if call.message.photo:
                if image_exists:
                    photo = FSInputFile(donate_image)
                    await call.message.edit_media(
                        media=InputMediaPhoto(media=photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:"),
                        reply_markup=donate_amounts_kb()
                    )
                else:
                    await call.message.edit_caption(caption="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:", reply_markup=donate_amounts_kb())
            else:
                if image_exists:
                    photo = FSInputFile(donate_image)
                    await call.message.answer_photo(photo=photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:", reply_markup=donate_amounts_kb())
                    await call.message.delete()
                else:
                    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:", reply_markup=donate_amounts_kb())
        except Exception:
            await call.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:", reply_markup=donate_amounts_kb())
            with contextlib.suppress(Exception):
                await call.message.delete()
        await call.answer()
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ —á–µ—Ä–µ–∑ callback –≤–∏–¥–∞ list:<type>:<page>
    if data.startswith("list:"):
        _, type_str, page_str = data.split(":", 2)
        page_num = int(page_str) if page_str.isdigit() else 1
        mapping = {
            "digital": (ItemType.DIGITAL, "projects"),
            "service": (ItemType.SERVICE, "services"),
        }
        if type_str in mapping:
            itype, section = mapping[type_str]
            await list_items(call.message, itype, section=section, call=call, page=page_num)
        await call.answer()
        return

    if data == "purchased":
        async with AsyncSessionLocal() as db:
            user = (await db.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
            empty_text = texts.get("empty", {}).get("purchased", "–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.")
            if not user:
                await call.answer(empty_text, show_alert=True)
                return
            purchases = (await db.execute(select(Purchase).where(Purchase.user_id == user.id))).scalars().all()
            if not purchases:
                await call.answer(empty_text, show_alert=True)
                return
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ id
            item_ids = [p.item_id for p in purchases if p.item_id is not None]
            items = (await db.execute(select(Item).where(Item.id.in_(item_ids)))).scalars().all()
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            kb = []
            for item in items:
                kb.append([InlineKeyboardButton(text=item.title, callback_data=f"item:{item.id}:{item.item_type.value}")])
            kb.append([InlineKeyboardButton(text=texts["buttons"]["back"], callback_data="back:main")])

            title = texts["main_menu"].get("purchased_title", "–í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
            image_path = texts["main_menu"].get("images", {}).get("purchased")
            try:
                if call.message.photo:
                    if image_path and Path(image_path).is_file():
                        photo = FSInputFile(image_path)
                        await call.message.edit_media(
                            media=InputMediaPhoto(media=photo, caption=title),
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
                        )
                    else:
                        await call.message.edit_caption(caption=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
                else:
                    if image_path and Path(image_path).is_file():
                        photo = FSInputFile(image_path)
                        await call.message.answer_photo(photo=photo, caption=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
                        await call.message.delete()
                    else:
                        await call.message.edit_text(text=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
            except Exception:
                await call.message.answer(text=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
                with contextlib.suppress(Exception):
                    await call.message.delete()
            await call.answer()
        return


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ (—Å—Ç—Ä–µ–ª–∫–∏), –∫–æ–≥–¥–∞ callback –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "menu:"
@router.callback_query(F.data.startswith("list:"))
async def list_pagination(call: CallbackQuery) -> None:
    try:
        _, type_str, page_str = call.data.split(":", 2)
        page_num = int(page_str) if page_str.isdigit() else 1
    except Exception:
        page_num = 1
        type_str = "digital"
    mapping = {
        "digital": (ItemType.DIGITAL, "projects"),
        "service": (ItemType.SERVICE, "services"),
    }
    if type_str in mapping:
        itype, section = mapping[type_str]
        await list_items(call.message, itype, section=section, call=call, page=page_num)
    await call.answer()


@router.callback_query(F.data.startswith("buy:"))
async def cb_buy(call: CallbackQuery) -> None:
    _, item_id = call.data.split(":", 1)
    await call.message.edit_reply_markup(reply_markup=payment_method_kb(int(item_id)))
    await call.answer()


@router.callback_query(F.data.startswith("buy_one:"))
async def cb_buy_one(call: CallbackQuery, state: FSMContext) -> None:
    _, item_id = call.data.split(":")
    item_id_int = int(item_id)
    async with OrdersClient() as client:
        try:
            url = await client.create_order(item_id_int, call.from_user.id)
            try:
                await call.message.edit_reply_markup(reply_markup=payment_link_kb(url))
            except Exception:
                # –§–æ–ª–±—ç–∫: –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å/—Ç–µ–∫—Å—Ç, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    if call.message.photo:
                        await call.message.edit_caption(caption="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ:", reply_markup=payment_link_kb(url))
                    else:
                        await call.message.edit_text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ:", reply_markup=payment_link_kb(url))
                except Exception:
                    await call.message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:", reply_markup=payment_link_kb(url))
        except Exception:
            await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await call.answer()


@router.callback_query(F.data.startswith("buy_direct:"))
async def cb_buy_direct(call: CallbackQuery, state: FSMContext) -> None:
    _, item_id, _ = call.data.split(":")
    item_id_int = int(item_id)
    async with OrdersClient() as client:
        try:
            url = await client.create_order(item_id_int, call.from_user.id)
            try:
                await call.message.edit_reply_markup(reply_markup=payment_link_kb(url))
            except Exception:
                try:
                    if call.message.photo:
                        await call.message.edit_caption(caption="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ:", reply_markup=payment_link_kb(url))
                    else:
                        await call.message.edit_text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ:", reply_markup=payment_link_kb(url))
                except Exception:
                    await call.message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:", reply_markup=payment_link_kb(url))
        except Exception:
            await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await call.answer()


@router.callback_query(F.data.startswith("back:"))
async def cb_back(call: CallbackQuery) -> None:
    parts = call.data.split(":")
    action = parts[1]
    item_type = parts[2] if len(parts) > 2 else None
    page = int(parts[3]) if len(parts) > 3 and parts[3].isdigit() else 1
    texts = load_texts()
    
    if action == "list" and item_type:
        item_type_mapping = {
            "digital": ItemType.DIGITAL,
            "service": ItemType.SERVICE,
        }
        section_mapping = {
            "digital": "projects",
            "service": "services",
        }
        item_type_enum = item_type_mapping.get(item_type)
        if item_type_enum:
            await list_items(call.message, item_type_enum, section=section_mapping[item_type], call=call, page=page)
            await call.answer()
            return
    
    if action == "purchased":
        async with AsyncSessionLocal() as db:
            user = (await db.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
            empty_text = texts.get("empty", {}).get("purchased", "–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.")
            if not user:
                await call.answer(empty_text, show_alert=True)
                return
            purchases = (await db.execute(select(Purchase).where(Purchase.user_id == user.id))).scalars().all()
            if not purchases:
                await call.answer(empty_text, show_alert=True)
                return
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ id
            item_ids = [p.item_id for p in purchases if p.item_id is not None]
            items = (await db.execute(select(Item).where(Item.id.in_(item_ids)))).scalars().all()
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            kb = []
            for item in items:
                kb.append([InlineKeyboardButton(text=item.title, callback_data=f"item:{item.id}:{item.item_type.value}")])
            kb.append([InlineKeyboardButton(text=texts["buttons"]["back"], callback_data="back:main")])

            title = texts["main_menu"].get("purchased_title", "–í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
            image_path = texts["main_menu"].get("images", {}).get("purchased")
            try:
                if call.message.photo:
                    if image_path and Path(image_path).is_file():
                        photo = FSInputFile(image_path)
                        await call.message.edit_media(
                            media=InputMediaPhoto(media=photo, caption=title),
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
                        )
                    else:
                        await call.message.edit_caption(caption=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
                else:
                    if image_path and Path(image_path).is_file():
                        photo = FSInputFile(image_path)
                        await call.message.answer_photo(photo=photo, caption=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
                        await call.message.delete()
                    else:
                        await call.message.edit_text(text=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
            except Exception:
                await call.message.answer(text=title, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
                with contextlib.suppress(Exception):
                    await call.message.delete()
            await call.answer()
        return
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ø–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã –æ–¥–∏–Ω —Ä–∞–∑
    async with AsyncSessionLocal() as db:
        user = (await db.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        cart_count = 0
        if user:
            cart_count = (await db.execute(
                select(func.count()).select_from(CartItem).where(CartItem.user_id == user.id)
            )).scalar_one()
    
    try:
        if "image" in texts["main_menu"]:
            photo = FSInputFile(texts["main_menu"]["image"])
            await call.message.edit_media(
                media=InputMediaPhoto(
                    media=photo,
                    caption=texts["main_menu"]["title"],
                    parse_mode="Markdown"
                ),
                reply_markup=main_menu_kb(texts, is_admin=_is_admin_user(call.from_user.id, call.from_user.username), cart_count=cart_count)
            )
        else:
            await call.message.edit_text(
                texts["main_menu"]["title"], 
                parse_mode="Markdown", 
                reply_markup=main_menu_kb(texts, is_admin=_is_admin_user(call.from_user.id, call.from_user.username), cart_count=cart_count)
            )
    except Exception:
        # Fallback: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer(
            texts["main_menu"]["title"], 
            parse_mode="Markdown", 
            reply_markup=main_menu_kb(texts, is_admin=_is_admin_user(call.from_user.id, call.from_user.username), cart_count=cart_count)
        )
        with contextlib.suppress(Exception):
            await call.message.delete()
    
    await call.answer()


@router.callback_query(F.data == "admin:create_invoice")
async def admin_create_invoice_start(call: CallbackQuery, state: FSMContext) -> None:
    if not _is_admin_user(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return
    prompt = load_texts().get("admin", {}).get("prompts", {}).get("description", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:")
    try:
        if call.message.photo:
            await call.message.edit_caption(caption=prompt, reply_markup=back_kb("menu:admin"))
        else:
            await call.message.edit_text(text=prompt, reply_markup=back_kb("menu:admin"))
    except Exception:
        await call.message.answer(prompt, reply_markup=back_kb("menu:admin"))
        with contextlib.suppress(Exception):
            await call.message.delete()
    await state.set_state(AdminInvoiceStates.waiting_for_description)
    await call.answer()


@router.message(AdminInvoiceStates.waiting_for_description)
async def admin_invoice_capture_description(message: Message, state: FSMContext) -> None:
    if not _is_admin_user(message.from_user.id, message.from_user.username):
        await state.clear()
        return
    desc = (message.text or "").strip()
    await state.update_data(invoice_desc=desc)
    prompt = load_texts().get("admin", {}).get("prompts", {}).get("amount", "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:")
    await message.answer(prompt, reply_markup=back_kb("menu:admin"))
    await state.set_state(AdminInvoiceStates.waiting_for_amount)


@router.message(AdminInvoiceStates.waiting_for_amount)
async def admin_invoice_capture_amount(message: Message, state: FSMContext) -> None:
    if not _is_admin_user(message.from_user.id, message.from_user.username):
        await state.clear()
        return
    text_val = (message.text or "").strip().replace(" ", "")
    if not text_val.isdigit() or int(text_val) <= 0:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.", reply_markup=back_kb("menu:admin"))
        return
    amount_minor = int(text_val) * 100
    data = await state.get_data()
    description = data.get("invoice_desc") or "–°—á—ë—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ –ÆKassa
    client = YooKassaClient()
    import uuid
    idem = str(uuid.uuid4())
    payment_id = f"admin:{message.from_user.id}:{idem}"
    try:
        resp = await client.create_payment(
            amount_minor=amount_minor,
            description=description,
            payment_id=payment_id,
            payment_method_type=None,
            metadata={"admin_invoice": True, "admin_tg_id": message.from_user.id},
            customer_email=None,
            idempotence_key=idem,
        )
        url = (resp or {}).get("confirmation", {}).get("confirmation_url")
        if not url:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            title = load_texts().get("admin", {}).get("result", {}).get("link_title", "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:")
            await message.answer(f"{title}\n{url}", reply_markup=payment_link_kb(url))
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await client.close()
    await state.clear()


@router.callback_query(F.data.startswith("item:"))
async def show_item(call: CallbackQuery) -> None:
    parts = call.data.split(":")
    item_id = parts[1]
    item_type = parts[2] if len(parts) > 2 else None
    page_from = int(parts[3]) if len(parts) > 3 and parts[3].isdigit() else 1
    logger.info("–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞: callback –ø–æ–ª—É—á–µ–Ω, item_id=%s, type=%s", item_id, item_type)
    async with AsyncSessionLocal() as db:
        item = (await db.execute(select(Item).where(Item.id == int(item_id)))).scalar_one_or_none()
        purchased = False
        in_cart = False
        try:
            user = (await db.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
            if user:
                purchased = (await db.execute(
                    select(Purchase).where(Purchase.user_id == user.id, Purchase.item_id == int(item_id))
                )).first() is not None
                in_cart = (await db.execute(
                    select(CartItem).where(CartItem.user_id == user.id, CartItem.item_id == int(item_id))
                )).scalar_one_or_none() is not None
        except Exception:
            purchased = False
            in_cart = False
        if not item:
            logger.error(f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: id={item_id}")
            await call.answer(f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: id={item_id}", show_alert=True)
            return
        caption = (
            f"*{item.title}*\n\n"
            f"{item.description}\n\n"
            f"üí∞ –¶–µ–Ω–∞: `{item.price_minor/100:.2f}` ‚ÇΩ"
        )
        logger.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É: %s (id=%s, type=%s)", item.title, item.id, item.item_type)
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if call.message.photo:
                # –ë—ã–ª–æ —Ñ–æ—Ç–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–æ–º
                media_source = None
                if item.image_file_id:
                    if item.image_file_id.startswith("http") or item.image_file_id.startswith("AgAC"):
                        media_source = item.image_file_id
                    elif Path(item.image_file_id).is_file():
                        media_source = FSInputFile(item.image_file_id)

                if not media_source:
                    # –§–æ–ª–±—ç–∫: –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
                    texts = load_texts()
                    defaults = texts.get("defaults", {}).get("images", {})
                    key = {
                        ItemType.SERVICE: "service",
                        ItemType.DIGITAL: "digital",
                    }.get(item.item_type)
                    default_path = defaults.get(key) if key else None
                    if default_path and Path(default_path).is_file():
                        media_source = FSInputFile(default_path)

                if media_source:
                    await call.message.edit_media(
                        media=InputMediaPhoto(
                            media=media_source,
                            caption=caption,
                            parse_mode="Markdown"
                        ),
                        reply_markup=item_card_kb(item.id, item_type, purchased, from_purchased=(call.message.caption and "–í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:" in call.message.caption), page=page_from, in_cart=in_cart)
                    )
                    logger.info("–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ (edit_media), id=%s", item.id)
                else:
                    await call.message.edit_caption(
                        caption=caption,
                        parse_mode="Markdown",
                        reply_markup=item_card_kb(item.id, item_type, purchased, from_purchased=(call.message.caption and "–í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:" in call.message.caption), page=page_from, in_cart=in_cart)
                    )
                    logger.info("–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ (edit_caption –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è), id=%s", item.id)
            else:
                await call.message.edit_text(
                    text=caption,
                    parse_mode="Markdown",
                    reply_markup=item_card_kb(item.id, item_type, purchased, from_purchased=False, page=page_from, in_cart=in_cart)
                )
                logger.info("–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ (edit_text), id=%s", item.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
            await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
        await call.answer()


async def list_items(message: Message, item_type: ItemType, section: str = None, call: CallbackQuery = None, page: int = 1, page_size: int = 5) -> None:
    texts = load_texts()
    from aiogram.exceptions import TelegramBadRequest
    async with AsyncSessionLocal() as db:
        base_stmt = select(Item).where(Item.item_type == item_type, Item.is_visible == True)
        total = (await db.execute(select(func.count()).select_from(base_stmt.subquery()))).scalar_one()
        items = (await db.execute(
            base_stmt.order_by(Item.id.desc()).offset((page-1)*page_size).limit(page_size)
        )).scalars().all()
        purchased_ids: set[int] = set()
        try:
            tg = message.chat.id if message else (call.from_user.id if call else None)
            if tg:
                user = (await db.execute(select(User).where(User.tg_id == tg))).scalar_one_or_none()
                if user:
                    purchases = (await db.execute(
                        select(Purchase.item_id).where(Purchase.user_id == user.id)
                    )).scalars().all()
                    purchased_ids = set(int(x) for x in purchases if x)
        except Exception:
            purchased_ids = set()
    if not items:
        empty_key = {
            ItemType.DIGITAL: "items",
            ItemType.SERVICE: "service",
        }.get(item_type, "items")
        empty_text = texts.get("empty", {}).get(empty_key, "–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞-—á—Ç–æ –Ω–µ—Ç, –Ω–æ –≤—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å!")
        if call:
            await call.answer(empty_text, show_alert=True)
            return
        else:
            await message.answer(empty_text, reply_markup=back_kb("back:main"))
            return
    if section is None:
        section_mapping = {
            ItemType.DIGITAL: "projects",
            ItemType.SERVICE: "services",
        }
        section = section_mapping.get(item_type)
    description = texts["main_menu"]["section_descriptions"].get(section, "–°–ø–∏—Å–æ–∫")
    image_path = texts["main_menu"].get("images", {}).get(section)
    try:
        if call:
            if image_path:
                photo = FSInputFile(image_path)
                try:
                    await call.message.edit_media(
                        media=InputMediaPhoto(
                            media=photo,
                            caption=description,
                        ),
                        reply_markup=items_list_kb(items, item_type.value, purchased_ids, page=page, total=total, page_size=page_size)
                    )
                except TelegramBadRequest as e:
                    if "message is not modified" in str(e):
                        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
            else:
                try:
                    await call.message.edit_text(
                        text=description,
                        reply_markup=items_list_kb(items, item_type.value, purchased_ids, page=page, total=total, page_size=page_size)
                    )
                except TelegramBadRequest as e:
                    if "message is not modified" in str(e):
                        pass
                    else:
                        raise
        else:
            if image_path:
                photo = FSInputFile(image_path)
                await message.answer_photo(
                    photo=photo,
                    caption=description,
                    reply_markup=items_list_kb(items, item_type.value, purchased_ids, page=page, total=total, page_size=page_size)
                )
            else:
                await message.answer(
                    text=description,
                    reply_markup=items_list_kb(items, item_type.value, purchased_ids, page=page, total=total, page_size=page_size)
                )
    except FileNotFoundError:
        if call:
            try:
                await call.message.edit_text(description, reply_markup=items_list_kb(items, item_type.value, page=page, total=total, page_size=page_size))
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    pass
                else:
                    raise
        else:
            await message.answer(description, reply_markup=items_list_kb(items, item_type.value, page=page, total=total, page_size=page_size))


@router.message(StateFilter(None))
async def fallback_message(message: Message) -> None:
    texts = load_texts()
    text = texts.get("fallback", {}).get("text") or "–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    await message.answer(text, reply_markup=main_menu_only_kb())


@router.callback_query(F.data.startswith("donate:set:"))
async def donate_set_amount(call: CallbackQuery) -> None:
    _, _, amount = call.data.split(":")
    amount_int = int(amount)
    # –°–æ–∑–¥–∞—ë–º –¥–æ–Ω–∞—Ç —Å—Ä–∞–∑—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
    async with OrdersClient() as client:
        try:
            url = await client.create_order(None, call.from_user.id, amount_minor=amount_int * 100)
            try:
                texts = load_texts()
                thanks = texts.get("donate", {}).get("thanks", "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
                if call.message.photo:
                    await call.message.edit_caption(caption=thanks, reply_markup=payment_link_kb(url))
                else:
                    await call.message.edit_text(text=thanks, reply_markup=payment_link_kb(url))
            except Exception:
                try:
                    thanks = load_texts().get("donate", {}).get("thanks", "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
                    if call.message.photo:
                        await call.message.edit_caption(caption=thanks, reply_markup=payment_link_kb(url))
                    else:
                        await call.message.edit_text(text=thanks, reply_markup=payment_link_kb(url))
                except Exception:
                    await call.message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:", reply_markup=payment_link_kb(url))
        except Exception:
            await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–Ω–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await call.answer()


@router.callback_query(F.data == "donate:custom")
async def donate_custom_prompt(call: CallbackQuery, state: FSMContext) -> None:
    donate_image = load_texts().get("donate", {}).get("image")
    image_exists = bool(donate_image and Path(donate_image).is_file())
    try:
        if call.message.photo:
            if image_exists:
                photo = FSInputFile(donate_image)
                await call.message.edit_media(
                    media=InputMediaPhoto(media=photo, caption="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:"),
                    reply_markup=back_kb("menu:donate")
                )
            else:
                await call.message.edit_caption(caption="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:", reply_markup=back_kb("menu:donate"))
        else:
            if image_exists:
                photo = FSInputFile(donate_image)
                await call.message.answer_photo(photo=photo, caption="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:", reply_markup=back_kb("menu:donate"))
                await call.message.delete()
            else:
                await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:", reply_markup=back_kb("menu:donate"))
    except Exception:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:", reply_markup=back_kb("menu:donate"))
        with contextlib.suppress(Exception):
            await call.message.delete()
    await state.set_state(DonateStates.waiting_for_amount)
    await call.answer()


@router.message(DonateStates.waiting_for_amount)
async def donate_custom_amount(message: Message, state: FSMContext) -> None:
    text_val = (message.text or "").strip()
    if not text_val.isdigit() or int(text_val) <= 0:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.", reply_markup=back_kb("menu:donate"))
        return
    amount = int(text_val)
    # –°–æ–∑–¥–∞—ë–º –¥–æ–Ω–∞—Ç –∏ —Å—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
    async with OrdersClient() as client:
        try:
            url = await client.create_order(None, message.from_user.id, amount_minor=amount * 100)
            thanks = load_texts().get("donate", {}).get("thanks", "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
            await message.answer(thanks, reply_markup=payment_link_kb(url))
        except Exception:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–Ω–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()


# ========== –ö–û–†–ó–ò–ù–ê ==========

@router.callback_query(F.data == "menu:cart")
async def show_cart(call: CallbackQuery) -> None:
    texts = load_texts()
    async with AsyncSessionLocal() as db:
        user = (await db.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        cart_items_rows = (await db.execute(
            select(CartItem).where(CartItem.user_id == user.id)
        )).scalars().all()
        
        if not cart_items_rows:
            await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return
        
        item_ids = [ci.item_id for ci in cart_items_rows]
        items = (await db.execute(select(Item).where(Item.id.in_(item_ids)))).scalars().all()
        
        unavailable = []
        available_items = []
        for item in items:
            if not item.is_visible:
                unavailable.append(item.title)
            else:
                available_items.append(item)
        
        if unavailable:
            msg = f"‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(unavailable)}"
            await call.answer(msg, show_alert=True)
        
        total = sum(it.price_minor for it in available_items)
        
        caption = "üõí *–ö–æ—Ä–∑–∏–Ω–∞*\n\n"
        for it in available_items:
            caption += f"‚Ä¢ {it.title} ‚Äî `{it.price_minor/100:.2f}` ‚ÇΩ\n"
        caption += f"\n*–ò—Ç–æ–≥–æ:* `{total/100:.2f}` ‚ÇΩ"
        
        try:
            if call.message.photo:
                await call.message.edit_caption(
                    caption=caption,
                    parse_mode="Markdown",
                    reply_markup=cart_kb(available_items, total)
                )
            else:
                await call.message.edit_text(
                    text=caption,
                    parse_mode="Markdown",
                    reply_markup=cart_kb(available_items, total)
                )
        except Exception:
            await call.message.answer(caption, parse_mode="Markdown", reply_markup=cart_kb(available_items, total))
            with contextlib.suppress(Exception):
                await call.message.delete()
    await call.answer()


@router.callback_query(F.data.startswith("cart:add:"))
async def add_to_cart(call: CallbackQuery) -> None:
    _, _, item_id = call.data.split(":")
    item_id_int = int(item_id)
    
    async with AsyncSessionLocal() as db:
        user = (await db.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        item = (await db.execute(select(Item).where(Item.id == item_id_int))).scalar_one_or_none()
        if not item:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        purchased = (await db.execute(
            select(Purchase).where(Purchase.user_id == user.id, Purchase.item_id == item_id_int)
        )).first() is not None
        
        if purchased and item.item_type == ItemType.DIGITAL:
            await call.answer("–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä", show_alert=True)
            return
        
        existing = (await db.execute(
            select(CartItem).where(CartItem.user_id == user.id, CartItem.item_id == item_id_int)
        )).scalar_one_or_none()
        
        if existing:
            await call.answer("–¢–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
            return
        
        cart_item = CartItem(user_id=user.id, item_id=item_id_int)
        db.add(cart_item)
        await db.commit()
    
    await call.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
    
    try:
        async with AsyncSessionLocal() as db:
            item = (await db.execute(select(Item).where(Item.id == item_id_int))).scalar_one_or_none()
            user = (await db.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
            in_cart = True
            purchased = False
            if user:
                purchased = (await db.execute(
                    select(Purchase).where(Purchase.user_id == user.id, Purchase.item_id == item_id_int)
                )).first() is not None
            
            caption = (
                f"*{item.title}*\n\n"
                f"{item.description}\n\n"
                f"üí∞ –¶–µ–Ω–∞: `{item.price_minor/100:.2f}` ‚ÇΩ"
            )
            await call.message.edit_caption(
                caption=caption,
                parse_mode="Markdown",
                reply_markup=item_card_kb(item.id, item.item_type.value, purchased, from_purchased=False, page=1, in_cart=in_cart)
            )
    except Exception:
        pass


@router.callback_query(F.data.startswith("cart:remove:"))
async def remove_from_cart(call: CallbackQuery) -> None:
    _, _, item_id = call.data.split(":")
    item_id_int = int(item_id)
    
    async with AsyncSessionLocal() as db:
        user = (await db.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await db.execute(
            delete(CartItem).where(CartItem.user_id == user.id, CartItem.item_id == item_id_int)
        )
        await db.commit()
    
    await call.answer("‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)
    
    if call.message and call.message.caption and "–ö–æ—Ä–∑–∏–Ω–∞" in call.message.caption:
        await show_cart(call)
    else:
        try:
            async with AsyncSessionLocal() as db:
                item = (await db.execute(select(Item).where(Item.id == item_id_int))).scalar_one_or_none()
                user = (await db.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
                in_cart = False
                purchased = False
                if user:
                    purchased = (await db.execute(
                        select(Purchase).where(Purchase.user_id == user.id, Purchase.item_id == item_id_int)
                    )).first() is not None
                
                caption = (
                    f"*{item.title}*\n\n"
                    f"{item.description}\n\n"
                    f"üí∞ –¶–µ–Ω–∞: `{item.price_minor/100:.2f}` ‚ÇΩ"
                )
                await call.message.edit_caption(
                    caption=caption,
                    parse_mode="Markdown",
                    reply_markup=item_card_kb(item.id, item.item_type.value, purchased, from_purchased=False, page=1, in_cart=in_cart)
                )
        except Exception:
            pass


@router.callback_query(F.data == "cart:clear")
async def clear_cart(call: CallbackQuery) -> None:
    async with AsyncSessionLocal() as db:
        user = (await db.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await db.execute(delete(CartItem).where(CartItem.user_id == user.id))
        await db.commit()
    
    await call.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", show_alert=True)
    
    texts = load_texts()
    try:
        if "image" in texts["main_menu"]:
            photo = FSInputFile(texts["main_menu"]["image"])
            await call.message.edit_media(
                media=InputMediaPhoto(media=photo, caption=texts["main_menu"]["title"], parse_mode="Markdown"),
                reply_markup=main_menu_kb(texts, is_admin=_is_admin_user(call.from_user.id, call.from_user.username), cart_count=0)
            )
        else:
            await call.message.edit_text(
                texts["main_menu"]["title"],
                parse_mode="Markdown",
                reply_markup=main_menu_kb(texts, is_admin=_is_admin_user(call.from_user.id, call.from_user.username), cart_count=0)
            )
    except Exception:
        await call.message.answer(
            texts["main_menu"]["title"],
            parse_mode="Markdown",
            reply_markup=main_menu_kb(texts, is_admin=_is_admin_user(call.from_user.id, call.from_user.username), cart_count=0)
        )


@router.callback_query(F.data == "cart:checkout")
async def checkout_cart(call: CallbackQuery, state: FSMContext) -> None:
    async with AsyncSessionLocal() as db:
        user = (await db.execute(select(User).where(User.tg_id == call.from_user.id))).scalar_one_or_none()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        cart_items_rows = (await db.execute(
            select(CartItem).where(CartItem.user_id == user.id)
        )).scalars().all()
        
        if not cart_items_rows:
            await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return
        
        item_ids = [ci.item_id for ci in cart_items_rows]
        items = (await db.execute(select(Item).where(Item.id.in_(item_ids), Item.is_visible == True))).scalars().all()
        
        if not items:
            await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–¥–æ–≤ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        for item in items:
            if item.item_type == ItemType.DIGITAL and item.delivery_type == 'codes':
                available_codes = (await db.execute(
                    select(func.count()).select_from(ItemCode).where(
                        ItemCode.item_id == item.id,
                        ItemCode.is_sold == False
                    )
                )).scalar_one()
                
                if available_codes < 1:
                    await call.answer(f"‚ùå –¢–æ–≤–∞—Ä '{item.title}' –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
                    return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
        if await has_offline_items(items):
            await state.update_data(
                cart_items=item_ids,
                total_amount=sum(it.price_minor for it in items)
            )
            
            texts = load_texts()
            prompt = texts.get("offline_delivery", {}).get("prompts", {}).get(
                "fullname", 
                "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:"
            )
            
            try:
                if call.message.photo:
                    await call.message.edit_caption(
                        caption=prompt,
                        reply_markup=back_kb("menu:cart")
                    )
                else:
                    await call.message.edit_text(
                        text=prompt,
                        reply_markup=back_kb("menu:cart")
                    )
            except Exception:
                await call.message.answer(prompt, reply_markup=back_kb("menu:cart"))
            
            await state.set_state(OfflineDeliveryStates.waiting_for_fullname)
            await call.answer()
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥
        total_amount = sum(it.price_minor for it in items)
        
        order = Order(
            user_id=user.id,
            item_id=None,
            amount_minor=total_amount,
            currency="RUB",
            payment_method=PaymentMethod.CARD_RF,
            status=OrderStatus.CREATED,
            buyer_tg_id=str(call.from_user.id),
        )
        db.add(order)
        await db.flush()
        
        client = YooKassaClient()
        try:
            import uuid
            idem = str(uuid.uuid4())
            templates = load_texts().get("payment", {}).get("description_templates", {})
            description = (templates.get("cart") or "–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã | –ó–∞–∫–∞–∑ {order_id}").format(order_id=order.id)
            
            resp = await client.create_payment(
                amount_minor=total_amount,
                description=description,
                payment_id=f"cart:{order.id}",
                payment_method_type=None,
                metadata={"cart_order_id": str(order.id), "item_ids": ",".join(str(i.id) for i in items)},
                customer_email=f"{call.from_user.id}@{settings.email_domain}",
                idempotence_key=idem,
            )
            url = (resp or {}).get("confirmation", {}).get("confirmation_url")
            if not url:
                # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await db.rollback()
                await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            order.fk_order_id = resp.get("id")
            order.fk_payment_url = url
            order.status = OrderStatus.PENDING
            
            for item in items:
                purchase = Purchase(
                    order_id=order.id,
                    user_id=user.id,
                    item_id=item.id,
                    delivery_info=None
                )
                db.add(purchase)
            
            await db.commit()
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
            await db.execute(delete(CartItem).where(CartItem.user_id == user.id))
            await db.commit()
            
            try:
                if call.message.photo:
                    await call.message.edit_caption(
                        caption="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ:",
                        reply_markup=payment_link_kb(url)
                    )
                else:
                    await call.message.edit_text(
                        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ:",
                        reply_markup=payment_link_kb(url)
                    )
            except Exception:
                await call.message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:", reply_markup=payment_link_kb(url))
        except Exception as e:
            # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
            await db.rollback()
            logger.error(f"Error creating cart order: {e}")
            await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            await client.close()
    
    await call.answer()


@router.message(OfflineDeliveryStates.waiting_for_fullname)
async def offline_capture_fullname(message: Message, state: FSMContext) -> None:
    fullname = (message.text or "").strip()
    
    if not fullname or len(fullname) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û")
        return
    
    await state.update_data(delivery_fullname=fullname)
    
    texts = load_texts()
    prompt = texts.get("offline_delivery", {}).get("prompts", {}).get(
        "phone",
        "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
    )
    
    await message.answer(prompt, reply_markup=back_kb("menu:cart"))
    await state.set_state(OfflineDeliveryStates.waiting_for_phone)


@router.message(OfflineDeliveryStates.waiting_for_phone)
async def offline_capture_phone(message: Message, state: FSMContext) -> None:
    phone = (message.text or "").strip()
    
    phone_digits = ''.join(filter(str.isdigit, phone))
    if len(phone_digits) < 10:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä)")
        return
    
    await state.update_data(delivery_phone=phone)
    
    texts = load_texts()
    prompt = texts.get("offline_delivery", {}).get("prompts", {}).get(
        "address",
        "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
    )
    
    await message.answer(prompt, reply_markup=back_kb("menu:cart"))
    await state.set_state(OfflineDeliveryStates.waiting_for_address)


@router.message(OfflineDeliveryStates.waiting_for_address)
async def offline_capture_address(message: Message, state: FSMContext) -> None:
    address = (message.text or "").strip()
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not address or len(address) < 10:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–∞
    address_lower = address.lower()
    has_street = any(keyword in address_lower for keyword in ['—É–ª', '—É–ª–∏—Ü–∞', '–ø—Ä', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø–µ—Ä', '–ø–µ—Ä–µ—É–ª–æ–∫', '–±—É–ª—å–≤–∞—Ä', '–±-—Ä', '–Ω–∞–±', '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è', '–ø—Ä–æ—Å–ø', '—à–æ—Å—Å–µ', '—à.'])
    has_building = any(keyword in address_lower for keyword in ['–¥.', '–¥ ', '–¥–æ–º'])
    
    if not has_street or not has_building:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å —É–ª–∏—Ü–µ–π –∏ –Ω–æ–º–µ—Ä–æ–º –¥–æ–º–∞\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5"
        )
        return
    
    await state.update_data(delivery_address=address)
    
    texts = load_texts()
    prompt = texts.get("offline_delivery", {}).get("prompts", {}).get(
        "comment",
        "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):"
    )
    
    await message.answer(prompt, reply_markup=skip_kb("offline:skip_comment"))
    await state.set_state(OfflineDeliveryStates.waiting_for_comment)


@router.message(OfflineDeliveryStates.waiting_for_comment)
async def offline_capture_comment(message: Message, state: FSMContext) -> None:
    comment = (message.text or "").strip()
    await state.update_data(delivery_comment=comment)
    await finalize_offline_order(message, state)


@router.callback_query(F.data == "offline:skip_comment")
async def offline_skip_comment(call: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(delivery_comment=None)
    await finalize_offline_order(call.message, state, call=call)


async def finalize_offline_order(message: Message, state: FSMContext, call: CallbackQuery = None) -> None:
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞–∫–∞–∑–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞"""
    data = await state.get_data()
    
    async with AsyncSessionLocal() as db:
        user = (await db.execute(select(User).where(User.tg_id == message.chat.id))).scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        item_ids = data.get('cart_items', [])
        items = (await db.execute(select(Item).where(Item.id.in_(item_ids)))).scalars().all()
        
        if not items:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
        
        total_amount = data.get('total_amount', sum(it.price_minor for it in items))
        
        order = Order(
            user_id=user.id,
            item_id=None,
            amount_minor=total_amount,
            currency="RUB",
            payment_method=PaymentMethod.CARD_RF,
            status=OrderStatus.CREATED,
            buyer_tg_id=str(message.chat.id),
        )
        db.add(order)
        await db.flush()
        
        client = YooKassaClient()
        try:
            import uuid
            idem = str(uuid.uuid4())
            templates = load_texts().get("payment", {}).get("description_templates", {})
            description = (templates.get("offline") or "–û—Ñ—Ñ–ª–∞–π–Ω –∑–∞–∫–∞–∑ #{order_id}").format(order_id=order.id)
            
            resp = await client.create_payment(
                amount_minor=total_amount,
                description=description,
                payment_id=f"offline:{order.id}",
                payment_method_type=None,
                metadata={
                    "offline_order_id": str(order.id),
                    "item_ids": ",".join(str(i.id) for i in items),
                    "has_delivery": "true"
                },
                customer_email=f"{message.chat.id}@{settings.email_domain}",
                idempotence_key=idem,
            )
            
            url = (resp or {}).get("confirmation", {}).get("confirmation_url")
            if not url:
                # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await db.rollback()
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            order.fk_order_id = resp.get("id")
            order.fk_payment_url = url
            order.status = OrderStatus.PENDING
            
            for item in items:
                purchase = Purchase(
                    order_id=order.id,
                    user_id=user.id,
                    item_id=item.id,
                    delivery_info=f"–ó–∞–∫–∞–∑ #{order.id}",
                    delivery_fullname=data.get('delivery_fullname'),
                    delivery_phone=data.get('delivery_phone'),
                    delivery_address=data.get('delivery_address'),
                    delivery_comment=data.get('delivery_comment')
                )
                db.add(purchase)
            
            await db.commit()
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
            await db.execute(delete(CartItem).where(CartItem.user_id == user.id))
            await db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await send_offline_order_to_admin(
                order_id=order.id,
                items=items,
                delivery_data={
                    'fullname': data.get('delivery_fullname'),
                    'phone': data.get('delivery_phone'),
                    'address': data.get('delivery_address'),
                    'comment': data.get('delivery_comment')
                },
                bot=message.bot
            )
            
            success_text = (
                "‚úÖ *–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n"
                f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: `#{order.id}`\n"
                f"üí∞ –°—É–º–º–∞: `{total_amount/100:.2f}` ‚ÇΩ\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
            )
            
            await message.answer(
                success_text,
                parse_mode="Markdown",
                reply_markup=payment_link_kb(url)
            )
            
        except Exception as e:
            # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
            await db.rollback()
            logger.error(f"Error finalizing offline order: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            await client.close()
    
    await state.clear()
    
    if call:
        await call.answer()