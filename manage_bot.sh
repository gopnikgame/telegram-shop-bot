#!/bin/bash

# –í–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º
set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_NAME="telegram-shop-bot"
INSTALL_DIR="/opt/$PROJECT_NAME"
LOGS_DIR="$INSTALL_DIR/logs"
BACKUPS_DIR="$INSTALL_DIR/backups"

# –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
ENV_FILE=".env"
ENV_EXAMPLE=".env.example"
TEXTS_FILE="app/texts.yml"

# –§–∞–π–ª—ã –ª–æ–≥–æ–≤
BOT_LOG_FILE="$LOGS_DIR/bot.log"
ERROR_LOG_FILE="$LOGS_DIR/error.log"
DOCKER_LOG_FILE="$LOGS_DIR/docker.log"

# –°–∫—Ä–∏–ø—Ç—ã
RESET_DB_SCRIPT="scripts/reset_db.sh"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏ –±—ç–∫–∞–ø–æ–≤
mkdir -p "$LOGS_DIR" "$BACKUPS_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local level=$1
    local message=$2
    echo -e "${!level}${message}${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ docker-compose
docker_compose_cmd() {
    if command -v docker-compose &> /dev/null; then
        docker-compose "$@"
    else
        docker compose "$@"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è .env —Ñ–∞–π–ª–æ–º
manage_env_file() {
    local created=false

    log "BLUE" "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π .env..."
    log "BLUE" "üìç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if [ ! -f "$ENV_FILE" ]; then
        if [ -f "$ENV_EXAMPLE" ]; then
            cp "$ENV_EXAMPLE" "$ENV_FILE"
            created=true
            log "GREEN" "‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"
        else
            log "RED" "‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            return 1
        fi
    fi

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–±–µ–∑ –ø–∞—Ä–æ–ª–µ–π)
    log "CYAN" "\nüìã –¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
    grep -v '^#' "$ENV_FILE" | grep -v '^$' | while read -r line; do
        key=$(echo "$line" | cut -d'=' -f1)
        value=$(echo "$line" | cut -d'=' -f2-)
        
        # –°–∫—Ä—ã–≤–∞—á–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if [[ "$key" == *"PASSWORD"* ]] || [[ "$key" == *"SECRET"* ]] || [[ "$key" == *"TOKEN"* ]]; then
            if [ -n "$value" ]; then
                echo "  $key=***"
            else
                log "YELLOW" "  $key= (–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)"
            fi
        else
            if [ -n "$value" ]; then
                echo "  $key=$value"
            else
                log "YELLOW" "  $key= (–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)"
            fi
        fi
    done

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
    echo ""
    read -r -p "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Ñ–∞–π–ª —Å–µ–π—á–∞—Å? [Y/n] " response
    response=${response:-Y}
    
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        if command -v nano &> /dev/null; then
            log "BLUE" "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º nano –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è .env..."
            nano "$ENV_FILE"
            editor_result=$?
        elif command -v vim &> /dev/null; then
            log "BLUE" "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º vim –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è .env..."
            vim "$ENV_FILE"
            editor_result=$?
        else
            log "BLUE" "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º vi –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è .env..."
            vi "$ENV_FILE"
            editor_result=$?
        fi

        if [ "$editor_result" -ne 0 ]; then
            log "RED" "‚ùå –†–µ–¥–∞–∫—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ –æ—à–∏–±–∫–∏: $editor_result"
            return 1
        fi
        
        log "GREEN" "‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    log "BLUE" "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤..."
    
    local required_vars=("BOT_TOKEN" "DATABASE_URL" "YK_SHOP_ID" "YK_SECRET_KEY")
    local missing_vars=()
    
    for var in "${required_vars[@]}"; do
        if ! grep -q "^${var}=..*" "$ENV_FILE"; then
            missing_vars+=("$var")
        fi
    done
    
    if [ ${#missing_vars[@]} -gt 0 ]; then
        log "YELLOW" "‚ö†Ô∏è –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
        for var in "${missing_vars[@]}"; do
            echo "  - $var"
        done
        log "YELLOW" "‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!"
        return 1
    fi
    
    log "GREEN" "‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è texts.yml
manage_texts_file() {
    log "BLUE" "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ texts.yml..."
    
    if [ ! -f "$TEXTS_FILE" ]; then
        log "RED" "‚ùå –§–∞–π–ª $TEXTS_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        return 1
    fi
    
    log "CYAN" "üìÑ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –±–æ—Ç–∞:"
    echo "  - –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫"
    echo "  - –°–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"
    echo "  - –û–ø–∏—Å–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π"
    echo "  - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã"
    echo "  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    echo ""
    
    read -r -p "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å texts.yml? [y/N] " response
    
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        if command -v nano &> /dev/null; then
            nano "$TEXTS_FILE"
        elif command -v vim &> /dev/null; then
            vim "$TEXTS_FILE"
        else
            vi "$TEXTS_FILE"
        fi
        log "GREEN" "‚úÖ –§–∞–π–ª texts.yml –æ–±–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
update_repo() {
    log "BLUE" "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if [ ! -d ".git" ]; then
        log "RED" "‚ùå –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
        return 1
    fi

    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    local backup_dir="$BACKUPS_DIR/backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    log "BLUE" "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ $backup_dir..."
    
    # –ë—ç–∫–∞–ø .env
    if [ -f "$ENV_FILE" ]; then
        cp "$ENV_FILE" "$backup_dir/"
        log "GREEN" "  ‚úÖ .env —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
    fi
    
    # –ë—ç–∫–∞–ø texts.yml
    if [ -f "$TEXTS_FILE" ]; then
        cp "$TEXTS_FILE" "$backup_dir/"
        log "GREEN" "  ‚úÖ texts.yml —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
    fi
    
    # –ë—ç–∫–∞–ø –ø–∞–ø–∫–∏ static (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    if [ -d "static" ]; then
        cp -r "static" "$backup_dir/"
        log "GREEN" "  ‚úÖ static/ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ($(du -sh static 2>/dev/null | cut -f1))"
    fi
    
    # –ë—ç–∫–∞–ø –ø–∞–ø–∫–∏ uploads (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
    if [ -d "uploads" ] && [ "$(ls -A uploads 2>/dev/null)" ]; then
        cp -r "uploads" "$backup_dir/"
        log "GREEN" "  ‚úÖ uploads/ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ($(du -sh uploads 2>/dev/null | cut -f1))"
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    git fetch origin
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if [ "$(git rev-parse HEAD)" != "$(git rev-parse origin/main)" ]; then
        log "CYAN" "\nüìã –ù–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:"
        git log HEAD..origin/main --oneline --graph --decorate
        echo ""
        read -r -p "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è? [Y/n] " response
        response=${response:-Y}
        
        if [[ ! "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            log "YELLOW" "‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            return 0
        fi
    else
        log "GREEN" "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω"
        return 0
    fi
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    log "BLUE" "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker_compose_cmd down
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    local repo_url=$(git config --get remote.origin.url)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ backups –∏ uploads
    log "BLUE" "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º backups –∏ uploads)..."
    find . -maxdepth 1 ! -name '.' ! -name '..' ! -name 'backups' ! -name 'uploads' -exec rm -rf {} + 2>/dev/null || true
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–Ω–æ–≤–æ
    log "BLUE" "üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ–∂–µ–π –≤–µ—Ä—Å–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    git clone "$repo_url" temp_clone
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ temp_clone –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    log "BLUE" "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤..."
    mv temp_clone/.git .
    mv temp_clone/* . 2>/dev/null || true
    mv temp_clone/.* . 2>/dev/null || true
    rm -rf temp_clone
    
    log "GREEN" "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω"

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    log "BLUE" "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ .env
    if [ -f "$backup_dir/.env" ]; then
        cp "$backup_dir/.env" "$ENV_FILE"
        log "GREEN" "  ‚úÖ .env –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        log "YELLOW" "  ‚ö†Ô∏è –ë—ç–∫–∞–ø .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ texts.yml
    if [ -f "$backup_dir/texts.yml" ]; then
        cp "$backup_dir/texts.yml" "$TEXTS_FILE"
        log "GREEN" "  ‚úÖ texts.yml –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        log "YELLOW" "  ‚ö†Ô∏è –ë—ç–∫–∞–ø texts.yml –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ static (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    if [ -d "$backup_dir/static" ]; then
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É static –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        mkdir -p "static"
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        cp -r "$backup_dir/static/"* "static/" 2>/dev/null || true
        log "GREEN" "  ‚úÖ static/ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"
    else
        log "YELLOW" "  ‚ö†Ô∏è –ë—ç–∫–∞–ø static/ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ uploads (–µ—Å–ª–∏ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –±—ç–∫–∞–ø–µ)
    if [ -d "$backup_dir/uploads" ] && [ "$(ls -A "$backup_dir/uploads" 2>/dev/null)" ]; then
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ uploads (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
        cp -rn "$backup_dir/uploads/"* "uploads/" 2>/dev/null || true
        log "GREEN" "  ‚úÖ uploads/ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)"
    fi
    
    log "GREEN" "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º –±—ç–∫–∞–ø–µ
    log "CYAN" "\nüíæ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $backup_dir"
    log "CYAN" "   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:"
    ls -lh "$backup_dir" | tail -n +2 | awk '{print "     - " $9 " (" $5 ")"}'
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    echo ""
    read -r -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã? [Y/n] " response
    response=${response:-Y}
    
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        manage_containers "start"
    else
        log "YELLOW" "‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker compose up -d"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database() {
    log "BLUE" "üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ë–î
    if ! docker ps | grep -q "shopbot-postgres"; then
        log "YELLOW" "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–µ–º..."
        docker_compose_cmd up -d db
        log "BLUE" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ PostgreSQL..."
        sleep 10
    fi
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    log "BLUE" "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
    
    if docker exec shopbot-api alembic current 2>/dev/null; then
        log "CYAN" "üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ë–î:"
        docker exec shopbot-api alembic current
        
        echo ""
        read -r -p "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏? [Y/n] " response
        response=${response:-Y}
        
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            docker exec shopbot-api alembic upgrade head
            log "GREEN" "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
        fi
    else
        log "YELLOW" "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä API –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ú–∏–≥—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
manage_containers() {
    local action=$1

    log "BLUE" "üê≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏..."

    case $action in
        "start")
            log "BLUE" "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            docker_compose_cmd up -d
            
            log "BLUE" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            sleep 5
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            if docker ps | grep -q "shopbot-api" && docker ps | grep -q "shopbot-postgres"; then
                log "GREEN" "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
                log "CYAN" "\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
                docker_compose_cmd ps
                
                log "CYAN" "\nüîó –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
                echo "  - API: http://localhost:8000"
                echo "  - Health: http://localhost:8000/health/"
                echo "  - Admin: http://localhost:8000/admin/"
                echo "  - PostgreSQL: localhost:5432"
            else
                log "RED" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
                docker_compose_cmd logs --tail=20
                return 1
            fi
            ;;
            
        "stop")
            log "BLUE" "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            docker_compose_cmd down
            log "GREEN" "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            ;;
            
        "restart")
            log "BLUE" "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            docker_compose_cmd restart
            
            log "BLUE" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞..."
            sleep 5
            
            if docker ps | grep -q "shopbot-api"; then
                log "GREEN" "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
                docker_compose_cmd logs --tail=10
            else
                log "RED" "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
                return 1
            fi
            ;;
            
        "rebuild")
            log "BLUE" "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            docker_compose_cmd down
            docker_compose_cmd build --no-cache
            docker_compose_cmd up -d
            
            log "BLUE" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
            sleep 10
            
            if docker ps | grep -q "shopbot-api"; then
                log "GREEN" "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã"
            else
                log "RED" "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–µ"
                return 1
            fi
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
view_logs() {
    local log_type=$1
    
    case $log_type in
        "all")
            log "CYAN" "üìä –í—Å–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
            docker_compose_cmd logs --tail=50
            ;;
        "api")
            log "CYAN" "üìä –õ–æ–≥–∏ API:"
            docker_compose_cmd logs api --tail=50
            ;;
        "db")
            log "CYAN" "üìä –õ–æ–≥–∏ PostgreSQL:"
            docker_compose_cmd logs db --tail=50
            ;;
        "errors")
            log "RED" "‚ùå –õ–æ–≥–∏ –æ—à–∏–±–æ–∫:"
            docker_compose_cmd logs --tail=100 | grep -i "error\|exception\|failed"
            ;;
        "follow")
            log "CYAN" "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
            docker_compose_cmd logs -f
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    log "BLUE" "üßπ –û—á–∏—Å—Ç–∫–∞..."
    
    echo ""
    log "CYAN" "–ß—Ç–æ –æ—á–∏—Å—Ç–∏—Ç—å?"
    echo "1. –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)"
    echo "2. –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)"
    echo "3. Docker volumes (‚ö†Ô∏è —É–¥–∞–ª–∏—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!)"
    echo "4. Docker images –∏ build cache"
    echo "5. –í—Å—ë –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ (–∫—Ä–æ–º–µ volumes)"
    echo "0. –û—Ç–º–µ–Ω–∞"
    
    read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): " choice
    
    case $choice in
        1)
            log "BLUE" "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤..."
            find "$LOGS_DIR" -type f -mtime +30 -delete 2>/dev/null || true
            log "GREEN" "‚úÖ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã"
            ;;
        2)
            log "BLUE" "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤..."
            find "$BACKUPS_DIR" -type d -mtime +30 -exec rm -rf {} + 2>/dev/null || true
            log "GREEN" "‚úÖ –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã —É–¥–∞–ª–µ–Ω—ã"
            ;;
        3)
            log "RED" "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!"
            read -r -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N] " confirm
            if [[ "$confirm" =~ ^([yY])$ ]]; then
                docker_compose_cmd down -v
                log "GREEN" "‚úÖ Volumes —É–¥–∞–ª–µ–Ω—ã"
            fi
            ;;
        4)
            log "BLUE" "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ Docker..."
            docker system prune -af
            log "GREEN" "‚úÖ Docker –æ—á–∏—â–µ–Ω"
            ;;
        5)
            log "BLUE" "üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
            find "$LOGS_DIR" -type f -mtime +30 -delete 2>/dev/null || true
            find "$BACKUPS_DIR" -type d -mtime +30 -exec rm -rf {} + 2>/dev/null || true
            docker system prune -af
            log "GREEN" "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            ;;
        0)
            log "YELLOW" "‚ö†Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ"
            ;;
        *)
            log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –ë–î
backup_database() {
    log "BLUE" "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    local backup_file="$BACKUPS_DIR/db_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    if docker ps | grep -q "shopbot-postgres"; then
        docker exec shopbot-postgres pg_dump -U shopbot shopbot > "$backup_file"
        log "GREEN" "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $backup_file"
    else
        log "RED" "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
restore_database() {
    log "BLUE" "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã
    log "CYAN" "\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:"
    local backups=($(ls -t "$BACKUPS_DIR"/db_backup_*.sql 2>/dev/null))
    
    if [ ${#backups[@]} -eq 0 ]; then
        log "RED" "‚ùå –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 1
    fi
    
    local i=1
    for backup in "${backups[@]}"; do
        echo "$i. $(basename "$backup")"
        i=$((i+1))
    done
    
    read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): " choice
    
    if [ "$choice" -eq 0 ] 2>/dev/null; then
        log "YELLOW" "‚ö†Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    if [ "$choice" -ge 1 ] 2>/dev/null && [ "$choice" -le "${#backups[@]}" ]; then
        local backup_file="${backups[$((choice-1))]}"
        
        log "RED" "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã!"
        read -r -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N] " confirm
        
        if [[ "$confirm" =~ ^([yY])$ ]]; then
            if docker ps | grep -q "shopbot-postgres"; then
                docker exec -i shopbot-postgres psql -U shopbot shopbot < "$backup_file"
                log "GREEN" "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            else
                log "RED" "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
                return 1
            fi
        fi
    else
        log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
reset_database() {
    log "RED" "üí£ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    log "RED" "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!"
    echo ""
    log "YELLOW" "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo "  - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo "  - –£–¥–∞–ª–∏—Ç volume —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
    echo "  - –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω—É–ª—è"
    echo "  - –ü—Ä–∏–º–µ–Ω–∏—Ç –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ"
    echo ""
    
    read -r -p "–í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " confirm
    
    if [ "$confirm" != "yes" ]; then
        log "YELLOW" "‚ö†Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
    log "BLUE" "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º..."
    backup_database || log "YELLOW" "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ reset_db.sh
    if [ -f "$RESET_DB_SCRIPT" ]; then
        log "BLUE" "üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å–±—Ä–æ—Å–∞..."
        bash "$RESET_DB_SCRIPT"
    else
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –≤—Ä—É—á–Ω—É—é
        log "BLUE" "‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
        docker_compose_cmd down
        
        log "BLUE" "üóëÔ∏è –£–¥–∞–ª—è–µ–º volume —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö..."
        docker volume rm "${PROJECT_NAME}_postgres_data" 2>/dev/null || true
        
        log "BLUE" "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
        docker_compose_cmd up -d
        
        log "BLUE" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        sleep 10
        
        log "BLUE" "üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
        docker exec shopbot-api alembic upgrade head
        
        log "GREEN" "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    log "CYAN" "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:"
    echo ""
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log "BLUE" "üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    docker_compose_cmd ps
    
    echo ""
    
    # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
    log "BLUE" "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:"
    
    if curl -s http://localhost:8000/health/ | grep -q '"status": "ok"'; then
        log "GREEN" "  ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω (http://localhost:8000)"
    else
        log "RED" "  ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    if docker ps | grep -q "shopbot-postgres"; then
        log "GREEN" "  ‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω"
    else
        log "RED" "  ‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    echo ""
    
    # –í–µ—Ä—Å–∏—è –ë–î
    if docker exec shopbot-api alembic current 2>/dev/null; then
        log "BLUE" "üóÑÔ∏è –í–µ—Ä—Å–∏—è –ë–î:"
        docker exec shopbot-api alembic current
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞–º–∏
manage_backups() {
    log "BLUE" "üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏..."
    
    echo ""
    log "CYAN" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo "1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—ç–∫–∞–ø—ã"
    echo "2. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø (–ë–î + –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)"
    echo "3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞"
    echo "4. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)"
    echo "5. –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—ç–∫–∞–ø"
    echo "0. –ù–∞–∑–∞–¥"
    
    read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): " choice
    
    case $choice in
        1)
            log "CYAN" "\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:"
            echo ""
            
            # –ë—ç–∫–∞–ø—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            local config_backups=($(ls -dt "$BACKUPS_DIR"/backup_* 2>/dev/null))
            if [ ${#config_backups[@]} -gt 0 ]; then
                log "BLUE" "üìÅ –ë—ç–∫–∞–ø—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
                for backup in "${config_backups[@]}"; do
                    local size=$(du -sh "$backup" 2>/dev/null | cut -f1)
                    local date=$(basename "$backup" | sed 's/backup_//' | sed 's/_/ /g')
                    echo "  - $(basename "$backup") ($size) - $date"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    if [ -d "$backup" ]; then
                        ls -lh "$backup" 2>/dev/null | tail -n +2 | awk '{print "      ‚Ä¢ " $9 " (" $5 ")"}'
                    fi
                done
                echo ""
            fi
            
            # –ë—ç–∫–∞–ø—ã –ë–î
            local db_backups=($(ls -t "$BACKUPS_DIR"/db_backup_*.sql 2>/dev/null))
            if [ ${#db_backups[@]} -gt 0 ]; then
                log "BLUE" "üóÑÔ∏è –ë—ç–∫–∞–ø—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
                for backup in "${db_backups[@]}"; do
                    local size=$(du -sh "$backup" 2>/dev/null | cut -f1)
                    local date=$(basename "$backup" | sed 's/db_backup_//' | sed 's/.sql//' | sed 's/_/ /g')
                    echo "  - $(basename "$backup") ($size) - $date"
                done
                echo ""
            fi
            
            if [ ${#config_backups[@]} -eq 0 ] && [ ${#db_backups[@]} -eq 0 ]; then
                log "YELLOW" "‚ö†Ô∏è –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            fi
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
            local total_size=$(du -sh "$BACKUPS_DIR" 2>/dev/null | cut -f1)
            log "CYAN" "üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–æ–≤: $total_size"
            ;;
            
        2)
            log "BLUE" "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞..."
            
            local backup_dir="$BACKUPS_DIR/backup_$(date +%Y%m%d_%H%M%S)"
            mkdir -p "$backup_dir"
            
            # –ë—ç–∫–∞–ø .env
            if [ -f "$ENV_FILE" ]; then
                cp "$ENV_FILE" "$backup_dir/"
                log "GREEN" "  ‚úÖ .env —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
            fi
            
            # –ë—ç–∫–∞–ø texts.yml
            if [ -f "$TEXTS_FILE" ]; then
                cp "$TEXTS_FILE" "$backup_dir/"
                log "GREEN" "  ‚úÖ texts.yml —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
            fi
            
            # –ë—ç–∫–∞–ø static
            if [ -d "static" ]; then
                cp -r "static" "$backup_dir/"
                log "GREEN" "  ‚úÖ static/ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ($(du -sh static 2>/dev/null | cut -f1))"
            fi
            
            # –ë—ç–∫–∞–ø uploads
            if [ -d "uploads" ] && [ "$(ls -A uploads 2>/dev/null)" ]; then
                cp -r "uploads" "$backup_dir/"
                log "GREEN" "  ‚úÖ uploads/ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ($(du -sh uploads 2>/dev/null | cut -f1))"
            fi
            
            # –ë—ç–∫–∞–ø –ë–î
            if docker ps | grep -q "shopbot-postgres"; then
                local db_backup_file="$BACKUPS_DIR/db_backup_$(date +%Y%m%d_%H%M%S).sql"
                docker exec shopbot-postgres pg_dump -U shopbot shopbot > "$db_backup_file"
                log "GREEN" "  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ($(du -sh "$db_backup_file" 2>/dev/null | cut -f1))"
            else
                log "YELLOW" "  ‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
            fi
            
            log "GREEN" "‚úÖ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $backup_dir"
            log "CYAN" "   –†–∞–∑–º–µ—Ä: $(du -sh "$backup_dir" 2>/dev/null | cut -f1)"
            ;;
            
        3)
            log "BLUE" "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞..."
            
            local backups=($(ls -dt "$BACKUPS_DIR"/backup_* 2>/dev/null))
            
            if [ ${#backups[@]} -eq 0 ]; then
                log "RED" "‚ùå –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                return 1
            fi
            
            log "CYAN" "\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:"
            local i=1
            for backup in "${backups[@]}"; do
                local size=$(du -sh "$backup" 2>/dev/null | cut -f1)
                echo "$i. $(basename "$backup") ($size)"
                i=$((i+1))
            done
            
            read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): " choice
            
            if [ "$choice" -eq 0 ] 2>/dev/null; then
                log "YELLOW" "‚ö†Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ"
                return 0
            fi
            
            if [ "$choice" -ge 1 ] 2>/dev/null && [ "$choice" -le "${#backups[@]}" ]; then
                local backup_dir="${backups[$((choice-1))]}"
                
                log "RED" "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã!"
                read -r -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N] " confirm
                
                if [[ "$confirm" =~ ^([yY])$ ]]; then
                    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ .env
                    if [ -f "$backup_dir/.env" ]; then
                        cp "$backup_dir/.env" "$ENV_FILE"
                        log "GREEN" "  ‚úÖ .env –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    fi
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ texts.yml
                    if [ -f "$backup_dir/texts.yml" ]; then
                        cp "$backup_dir/texts.yml" "$TEXTS_FILE"
                        log "GREEN" "  ‚úÖ texts.yml –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    fi
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ static
                    if [ -d "$backup_dir/static" ]; then
                        mkdir -p "static"
                        cp -r "$backup_dir/static/"* "static/" 2>/dev/null || true
                        log "GREEN" "  ‚úÖ static/ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    fi
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ uploads
                    if [ -d "$backup_dir/uploads" ]; then
                        cp -rn "$backup_dir/uploads/"* "uploads/" 2>/dev/null || true
                        log "GREEN" "  ‚úÖ uploads/ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    fi
                    
                    log "GREEN" "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞"
                    log "YELLOW" "‚ö†Ô∏è –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–Ω–∫—Ç '9. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ –±—ç–∫–∞–ø–∞'"
                fi
            else
                log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            fi
            ;;
            
        4)
            log "BLUE" "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)..."
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
            local old_backups=$(find "$BACKUPS_DIR" -type d -name "backup_*" -mtime +30 2>/dev/null | wc -l)
            local old_db_backups=$(find "$BACKUPS_DIR" -type f -name "db_backup_*.sql" -mtime +30 2>/dev/null | wc -l)
            
            if [ "$old_backups" -eq 0 ] && [ "$old_db_backups" -eq 0 ]; then
                log "GREEN" "‚úÖ –°—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                return 0
            fi
            
            log "YELLOW" "‚ö†Ô∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:"
            [ "$old_backups" -gt 0 ] && echo "  - –ë—ç–∫–∞–ø–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $old_backups"
            [ "$old_db_backups" -gt 0 ] && echo "  - –ë—ç–∫–∞–ø–æ–≤ –ë–î: $old_db_backups"
            
            read -r -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N] " confirm
            
            if [[ "$confirm" =~ ^([yY])$ ]]; then
                find "$BACKUPS_DIR" -type d -name "backup_*" -mtime +30 -exec rm -rf {} + 2>/dev/null || true
                find "$BACKUPS_DIR" -type f -name "db_backup_*.sql" -mtime +30 -delete 2>/dev/null || true
                log "GREEN" "‚úÖ –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã —É–¥–∞–ª–µ–Ω—ã"
            fi
            ;;
            
        5)
            log "BLUE" "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞..."
            
            local all_backups=($(ls -dt "$BACKUPS_DIR"/* 2>/dev/null))
            
            if [ ${#all_backups[@]} -eq 0 ]; then
                log "RED" "‚ùå –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                return 1
            fi
            
            log "CYAN" "\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:"
            local i=1
            for backup in "${all_backups[@]}"; do
                local size=$(du -sh "$backup" 2>/dev/null | cut -f1)
                echo "$i. $(basename "$backup") ($size)"
                i=$((i+1))
            done
            
            read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): " choice
            
            if [ "$choice" -eq 0 ] 2>/dev/null; then
                log "YELLOW" "‚ö†Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ"
                return 0
            fi
            
            if [ "$choice" -ge 1 ] 2>/dev/null && [ "$choice" -le "${#all_backups[@]}" ]; then
                local backup_to_delete="${all_backups[$((choice-1))]}"
                
                log "RED" "‚ö†Ô∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω: $(basename "$backup_to_delete")"
                read -r -p "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ [y/N]: " confirm
                
                if [[ "$confirm" =~ ^([yY])$ ]]; then
                    rm -rf "$backup_to_delete"
                    log "GREEN" "‚úÖ –ë—ç–∫–∞–ø —É–¥–∞–ª–µ–Ω"
                fi
            else
                log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            fi
            ;;
            
        0)
            return 0
            ;;
            
        *)
            log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_menu() {
    while true; do
        echo ""
        log "YELLOW" "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
        log "YELLOW" "‚ïë   üõí Telegram Shop Bot Manager       ‚ïë"
        log "YELLOW" "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        echo ""
        log "GREEN" "üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
        echo "  1. –°–æ–∑–¥–∞—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env"
        echo "  2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å texts.yml"
        echo ""
        log "GREEN" "üê≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏:"
        echo "  3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
        echo "  4. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
        echo "  5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
        echo "  6. –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
        echo ""
        log "GREEN" "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:"
        echo "  7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î"
        echo "  8. –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î"
        echo "  9. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ –±—ç–∫–∞–ø–∞"
        echo "  10. üí£ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ë–î (—É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!)"
        echo ""
        log "GREEN" "üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏:"
        echo "  11. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä/—Å–æ–∑–¥–∞–Ω–∏–µ/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)"
        echo ""
        log "GREEN" "üìä –õ–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
        echo "  12. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏"
        echo "  13. –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ API"
        echo "  14. –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ PostgreSQL"
        echo "  15. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏"
        echo "  16. –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ª–æ–≥–∏ (follow)"
        echo "  17. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        echo ""
        log "GREEN" "üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:"
        echo "  18. –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        echo "  19. –û—á–∏—Å—Ç–∫–∞ (–ª–æ–≥–∏, —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, Docker)"
        echo ""
        log "GREEN" "0. üö™ –í—ã–π—Ç–∏"
        echo ""

        read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-19): " choice

        case "$choice" in
            1) manage_env_file ;;
            2) manage_texts_file ;;
            3) manage_containers "start" ;;
            4) manage_containers "stop" ;;
            5) manage_containers "restart" ;;
            6) manage_containers "rebuild" ;;
            7) init_database ;;
            8) backup_database ;;
            9) restore_database ;;
            10) reset_database ;;
            11) manage_backups ;;
            12) view_logs "all" ;;
            13) view_logs "api" ;;
            14) view_logs "db" ;;
            15) view_logs "errors" ;;
            16) view_logs "follow" ;;
            17) check_status ;;
            18) update_repo ;;
            19) cleanup ;;
            0)
                log "BLUE" "üö™ –í—ã—Ö–æ–¥..."
                break
                ;;
            *)
                log "RED" "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç 0 –¥–æ 19."
                ;;
        esac
        
        echo ""
        read -r -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "docker-compose.yml" ]; then
    log "RED" "‚ùå –û—à–∏–±–∫–∞: docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    log "YELLOW" "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ telegram-shop-bot"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_menu